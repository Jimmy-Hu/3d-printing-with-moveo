// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Cura.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Cura_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Cura_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Cura_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Cura_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[17]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Cura_2eproto;
namespace cura {
namespace proto {
class Extruder;
class ExtruderDefaultTypeInternal;
extern ExtruderDefaultTypeInternal _Extruder_default_instance_;
class GCodeLayer;
class GCodeLayerDefaultTypeInternal;
extern GCodeLayerDefaultTypeInternal _GCodeLayer_default_instance_;
class GCodePrefix;
class GCodePrefixDefaultTypeInternal;
extern GCodePrefixDefaultTypeInternal _GCodePrefix_default_instance_;
class Layer;
class LayerDefaultTypeInternal;
extern LayerDefaultTypeInternal _Layer_default_instance_;
class LayerOptimized;
class LayerOptimizedDefaultTypeInternal;
extern LayerOptimizedDefaultTypeInternal _LayerOptimized_default_instance_;
class MaterialEstimates;
class MaterialEstimatesDefaultTypeInternal;
extern MaterialEstimatesDefaultTypeInternal _MaterialEstimates_default_instance_;
class Object;
class ObjectDefaultTypeInternal;
extern ObjectDefaultTypeInternal _Object_default_instance_;
class ObjectList;
class ObjectListDefaultTypeInternal;
extern ObjectListDefaultTypeInternal _ObjectList_default_instance_;
class PathSegment;
class PathSegmentDefaultTypeInternal;
extern PathSegmentDefaultTypeInternal _PathSegment_default_instance_;
class Polygon;
class PolygonDefaultTypeInternal;
extern PolygonDefaultTypeInternal _Polygon_default_instance_;
class PrintTimeMaterialEstimates;
class PrintTimeMaterialEstimatesDefaultTypeInternal;
extern PrintTimeMaterialEstimatesDefaultTypeInternal _PrintTimeMaterialEstimates_default_instance_;
class Progress;
class ProgressDefaultTypeInternal;
extern ProgressDefaultTypeInternal _Progress_default_instance_;
class Setting;
class SettingDefaultTypeInternal;
extern SettingDefaultTypeInternal _Setting_default_instance_;
class SettingExtruder;
class SettingExtruderDefaultTypeInternal;
extern SettingExtruderDefaultTypeInternal _SettingExtruder_default_instance_;
class SettingList;
class SettingListDefaultTypeInternal;
extern SettingListDefaultTypeInternal _SettingList_default_instance_;
class Slice;
class SliceDefaultTypeInternal;
extern SliceDefaultTypeInternal _Slice_default_instance_;
class SlicingFinished;
class SlicingFinishedDefaultTypeInternal;
extern SlicingFinishedDefaultTypeInternal _SlicingFinished_default_instance_;
}  // namespace proto
}  // namespace cura
PROTOBUF_NAMESPACE_OPEN
template<> ::cura::proto::Extruder* Arena::CreateMaybeMessage<::cura::proto::Extruder>(Arena*);
template<> ::cura::proto::GCodeLayer* Arena::CreateMaybeMessage<::cura::proto::GCodeLayer>(Arena*);
template<> ::cura::proto::GCodePrefix* Arena::CreateMaybeMessage<::cura::proto::GCodePrefix>(Arena*);
template<> ::cura::proto::Layer* Arena::CreateMaybeMessage<::cura::proto::Layer>(Arena*);
template<> ::cura::proto::LayerOptimized* Arena::CreateMaybeMessage<::cura::proto::LayerOptimized>(Arena*);
template<> ::cura::proto::MaterialEstimates* Arena::CreateMaybeMessage<::cura::proto::MaterialEstimates>(Arena*);
template<> ::cura::proto::Object* Arena::CreateMaybeMessage<::cura::proto::Object>(Arena*);
template<> ::cura::proto::ObjectList* Arena::CreateMaybeMessage<::cura::proto::ObjectList>(Arena*);
template<> ::cura::proto::PathSegment* Arena::CreateMaybeMessage<::cura::proto::PathSegment>(Arena*);
template<> ::cura::proto::Polygon* Arena::CreateMaybeMessage<::cura::proto::Polygon>(Arena*);
template<> ::cura::proto::PrintTimeMaterialEstimates* Arena::CreateMaybeMessage<::cura::proto::PrintTimeMaterialEstimates>(Arena*);
template<> ::cura::proto::Progress* Arena::CreateMaybeMessage<::cura::proto::Progress>(Arena*);
template<> ::cura::proto::Setting* Arena::CreateMaybeMessage<::cura::proto::Setting>(Arena*);
template<> ::cura::proto::SettingExtruder* Arena::CreateMaybeMessage<::cura::proto::SettingExtruder>(Arena*);
template<> ::cura::proto::SettingList* Arena::CreateMaybeMessage<::cura::proto::SettingList>(Arena*);
template<> ::cura::proto::Slice* Arena::CreateMaybeMessage<::cura::proto::Slice>(Arena*);
template<> ::cura::proto::SlicingFinished* Arena::CreateMaybeMessage<::cura::proto::SlicingFinished>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace cura {
namespace proto {

enum Polygon_Type : int {
  Polygon_Type_NoneType = 0,
  Polygon_Type_Inset0Type = 1,
  Polygon_Type_InsetXType = 2,
  Polygon_Type_SkinType = 3,
  Polygon_Type_SupportType = 4,
  Polygon_Type_SkirtType = 5,
  Polygon_Type_InfillType = 6,
  Polygon_Type_SupportInfillType = 7,
  Polygon_Type_MoveCombingType = 8,
  Polygon_Type_MoveRetractionType = 9,
  Polygon_Type_SupportInterfaceType = 10,
  Polygon_Type_PrimeTowerType = 11,
  Polygon_Type_Polygon_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Polygon_Type_Polygon_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Polygon_Type_IsValid(int value);
constexpr Polygon_Type Polygon_Type_Type_MIN = Polygon_Type_NoneType;
constexpr Polygon_Type Polygon_Type_Type_MAX = Polygon_Type_PrimeTowerType;
constexpr int Polygon_Type_Type_ARRAYSIZE = Polygon_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Polygon_Type_descriptor();
template<typename T>
inline const std::string& Polygon_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Polygon_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Polygon_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Polygon_Type_descriptor(), enum_t_value);
}
inline bool Polygon_Type_Parse(
    const std::string& name, Polygon_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Polygon_Type>(
    Polygon_Type_descriptor(), name, value);
}
enum PathSegment_PointType : int {
  PathSegment_PointType_Point2D = 0,
  PathSegment_PointType_Point3D = 1,
  PathSegment_PointType_PathSegment_PointType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PathSegment_PointType_PathSegment_PointType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PathSegment_PointType_IsValid(int value);
constexpr PathSegment_PointType PathSegment_PointType_PointType_MIN = PathSegment_PointType_Point2D;
constexpr PathSegment_PointType PathSegment_PointType_PointType_MAX = PathSegment_PointType_Point3D;
constexpr int PathSegment_PointType_PointType_ARRAYSIZE = PathSegment_PointType_PointType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PathSegment_PointType_descriptor();
template<typename T>
inline const std::string& PathSegment_PointType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PathSegment_PointType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PathSegment_PointType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PathSegment_PointType_descriptor(), enum_t_value);
}
inline bool PathSegment_PointType_Parse(
    const std::string& name, PathSegment_PointType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PathSegment_PointType>(
    PathSegment_PointType_descriptor(), name, value);
}
// ===================================================================

class ObjectList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cura.proto.ObjectList) */ {
 public:
  ObjectList();
  virtual ~ObjectList();

  ObjectList(const ObjectList& from);
  ObjectList(ObjectList&& from) noexcept
    : ObjectList() {
    *this = ::std::move(from);
  }

  inline ObjectList& operator=(const ObjectList& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectList& operator=(ObjectList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ObjectList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObjectList* internal_default_instance() {
    return reinterpret_cast<const ObjectList*>(
               &_ObjectList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ObjectList& a, ObjectList& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObjectList* New() const final {
    return CreateMaybeMessage<ObjectList>(nullptr);
  }

  ObjectList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObjectList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObjectList& from);
  void MergeFrom(const ObjectList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cura.proto.ObjectList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Cura_2eproto);
    return ::descriptor_table_Cura_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectsFieldNumber = 1,
    kSettingsFieldNumber = 2,
  };
  // repeated .cura.proto.Object objects = 1;
  int objects_size() const;
  private:
  int _internal_objects_size() const;
  public:
  void clear_objects();
  ::cura::proto::Object* mutable_objects(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cura::proto::Object >*
      mutable_objects();
  private:
  const ::cura::proto::Object& _internal_objects(int index) const;
  ::cura::proto::Object* _internal_add_objects();
  public:
  const ::cura::proto::Object& objects(int index) const;
  ::cura::proto::Object* add_objects();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cura::proto::Object >&
      objects() const;

  // repeated .cura.proto.Setting settings = 2;
  int settings_size() const;
  private:
  int _internal_settings_size() const;
  public:
  void clear_settings();
  ::cura::proto::Setting* mutable_settings(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cura::proto::Setting >*
      mutable_settings();
  private:
  const ::cura::proto::Setting& _internal_settings(int index) const;
  ::cura::proto::Setting* _internal_add_settings();
  public:
  const ::cura::proto::Setting& settings(int index) const;
  ::cura::proto::Setting* add_settings();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cura::proto::Setting >&
      settings() const;

  // @@protoc_insertion_point(class_scope:cura.proto.ObjectList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cura::proto::Object > objects_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cura::proto::Setting > settings_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Cura_2eproto;
};
// -------------------------------------------------------------------

class Slice :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cura.proto.Slice) */ {
 public:
  Slice();
  virtual ~Slice();

  Slice(const Slice& from);
  Slice(Slice&& from) noexcept
    : Slice() {
    *this = ::std::move(from);
  }

  inline Slice& operator=(const Slice& from) {
    CopyFrom(from);
    return *this;
  }
  inline Slice& operator=(Slice&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Slice& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Slice* internal_default_instance() {
    return reinterpret_cast<const Slice*>(
               &_Slice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Slice& a, Slice& b) {
    a.Swap(&b);
  }
  inline void Swap(Slice* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Slice* New() const final {
    return CreateMaybeMessage<Slice>(nullptr);
  }

  Slice* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Slice>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Slice& from);
  void MergeFrom(const Slice& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Slice* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cura.proto.Slice";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Cura_2eproto);
    return ::descriptor_table_Cura_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectListsFieldNumber = 1,
    kExtrudersFieldNumber = 3,
    kLimitToExtruderFieldNumber = 4,
    kGlobalSettingsFieldNumber = 2,
  };
  // repeated .cura.proto.ObjectList object_lists = 1;
  int object_lists_size() const;
  private:
  int _internal_object_lists_size() const;
  public:
  void clear_object_lists();
  ::cura::proto::ObjectList* mutable_object_lists(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cura::proto::ObjectList >*
      mutable_object_lists();
  private:
  const ::cura::proto::ObjectList& _internal_object_lists(int index) const;
  ::cura::proto::ObjectList* _internal_add_object_lists();
  public:
  const ::cura::proto::ObjectList& object_lists(int index) const;
  ::cura::proto::ObjectList* add_object_lists();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cura::proto::ObjectList >&
      object_lists() const;

  // repeated .cura.proto.Extruder extruders = 3;
  int extruders_size() const;
  private:
  int _internal_extruders_size() const;
  public:
  void clear_extruders();
  ::cura::proto::Extruder* mutable_extruders(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cura::proto::Extruder >*
      mutable_extruders();
  private:
  const ::cura::proto::Extruder& _internal_extruders(int index) const;
  ::cura::proto::Extruder* _internal_add_extruders();
  public:
  const ::cura::proto::Extruder& extruders(int index) const;
  ::cura::proto::Extruder* add_extruders();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cura::proto::Extruder >&
      extruders() const;

  // repeated .cura.proto.SettingExtruder limit_to_extruder = 4;
  int limit_to_extruder_size() const;
  private:
  int _internal_limit_to_extruder_size() const;
  public:
  void clear_limit_to_extruder();
  ::cura::proto::SettingExtruder* mutable_limit_to_extruder(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cura::proto::SettingExtruder >*
      mutable_limit_to_extruder();
  private:
  const ::cura::proto::SettingExtruder& _internal_limit_to_extruder(int index) const;
  ::cura::proto::SettingExtruder* _internal_add_limit_to_extruder();
  public:
  const ::cura::proto::SettingExtruder& limit_to_extruder(int index) const;
  ::cura::proto::SettingExtruder* add_limit_to_extruder();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cura::proto::SettingExtruder >&
      limit_to_extruder() const;

  // .cura.proto.SettingList global_settings = 2;
  bool has_global_settings() const;
  private:
  bool _internal_has_global_settings() const;
  public:
  void clear_global_settings();
  const ::cura::proto::SettingList& global_settings() const;
  ::cura::proto::SettingList* release_global_settings();
  ::cura::proto::SettingList* mutable_global_settings();
  void set_allocated_global_settings(::cura::proto::SettingList* global_settings);
  private:
  const ::cura::proto::SettingList& _internal_global_settings() const;
  ::cura::proto::SettingList* _internal_mutable_global_settings();
  public:

  // @@protoc_insertion_point(class_scope:cura.proto.Slice)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cura::proto::ObjectList > object_lists_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cura::proto::Extruder > extruders_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cura::proto::SettingExtruder > limit_to_extruder_;
  ::cura::proto::SettingList* global_settings_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Cura_2eproto;
};
// -------------------------------------------------------------------

class Extruder :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cura.proto.Extruder) */ {
 public:
  Extruder();
  virtual ~Extruder();

  Extruder(const Extruder& from);
  Extruder(Extruder&& from) noexcept
    : Extruder() {
    *this = ::std::move(from);
  }

  inline Extruder& operator=(const Extruder& from) {
    CopyFrom(from);
    return *this;
  }
  inline Extruder& operator=(Extruder&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Extruder& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Extruder* internal_default_instance() {
    return reinterpret_cast<const Extruder*>(
               &_Extruder_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Extruder& a, Extruder& b) {
    a.Swap(&b);
  }
  inline void Swap(Extruder* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Extruder* New() const final {
    return CreateMaybeMessage<Extruder>(nullptr);
  }

  Extruder* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Extruder>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Extruder& from);
  void MergeFrom(const Extruder& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Extruder* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cura.proto.Extruder";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Cura_2eproto);
    return ::descriptor_table_Cura_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSettingsFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // .cura.proto.SettingList settings = 2;
  bool has_settings() const;
  private:
  bool _internal_has_settings() const;
  public:
  void clear_settings();
  const ::cura::proto::SettingList& settings() const;
  ::cura::proto::SettingList* release_settings();
  ::cura::proto::SettingList* mutable_settings();
  void set_allocated_settings(::cura::proto::SettingList* settings);
  private:
  const ::cura::proto::SettingList& _internal_settings() const;
  ::cura::proto::SettingList* _internal_mutable_settings();
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:cura.proto.Extruder)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::cura::proto::SettingList* settings_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Cura_2eproto;
};
// -------------------------------------------------------------------

class Object :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cura.proto.Object) */ {
 public:
  Object();
  virtual ~Object();

  Object(const Object& from);
  Object(Object&& from) noexcept
    : Object() {
    *this = ::std::move(from);
  }

  inline Object& operator=(const Object& from) {
    CopyFrom(from);
    return *this;
  }
  inline Object& operator=(Object&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Object& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Object* internal_default_instance() {
    return reinterpret_cast<const Object*>(
               &_Object_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Object& a, Object& b) {
    a.Swap(&b);
  }
  inline void Swap(Object* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Object* New() const final {
    return CreateMaybeMessage<Object>(nullptr);
  }

  Object* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Object>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Object& from);
  void MergeFrom(const Object& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Object* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cura.proto.Object";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Cura_2eproto);
    return ::descriptor_table_Cura_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSettingsFieldNumber = 5,
    kVerticesFieldNumber = 2,
    kNormalsFieldNumber = 3,
    kIndicesFieldNumber = 4,
    kNameFieldNumber = 6,
    kIdFieldNumber = 1,
  };
  // repeated .cura.proto.Setting settings = 5;
  int settings_size() const;
  private:
  int _internal_settings_size() const;
  public:
  void clear_settings();
  ::cura::proto::Setting* mutable_settings(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cura::proto::Setting >*
      mutable_settings();
  private:
  const ::cura::proto::Setting& _internal_settings(int index) const;
  ::cura::proto::Setting* _internal_add_settings();
  public:
  const ::cura::proto::Setting& settings(int index) const;
  ::cura::proto::Setting* add_settings();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cura::proto::Setting >&
      settings() const;

  // bytes vertices = 2;
  void clear_vertices();
  const std::string& vertices() const;
  void set_vertices(const std::string& value);
  void set_vertices(std::string&& value);
  void set_vertices(const char* value);
  void set_vertices(const void* value, size_t size);
  std::string* mutable_vertices();
  std::string* release_vertices();
  void set_allocated_vertices(std::string* vertices);
  private:
  const std::string& _internal_vertices() const;
  void _internal_set_vertices(const std::string& value);
  std::string* _internal_mutable_vertices();
  public:

  // bytes normals = 3;
  void clear_normals();
  const std::string& normals() const;
  void set_normals(const std::string& value);
  void set_normals(std::string&& value);
  void set_normals(const char* value);
  void set_normals(const void* value, size_t size);
  std::string* mutable_normals();
  std::string* release_normals();
  void set_allocated_normals(std::string* normals);
  private:
  const std::string& _internal_normals() const;
  void _internal_set_normals(const std::string& value);
  std::string* _internal_mutable_normals();
  public:

  // bytes indices = 4;
  void clear_indices();
  const std::string& indices() const;
  void set_indices(const std::string& value);
  void set_indices(std::string&& value);
  void set_indices(const char* value);
  void set_indices(const void* value, size_t size);
  std::string* mutable_indices();
  std::string* release_indices();
  void set_allocated_indices(std::string* indices);
  private:
  const std::string& _internal_indices() const;
  void _internal_set_indices(const std::string& value);
  std::string* _internal_mutable_indices();
  public:

  // string name = 6;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:cura.proto.Object)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cura::proto::Setting > settings_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vertices_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr normals_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr indices_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Cura_2eproto;
};
// -------------------------------------------------------------------

class Progress :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cura.proto.Progress) */ {
 public:
  Progress();
  virtual ~Progress();

  Progress(const Progress& from);
  Progress(Progress&& from) noexcept
    : Progress() {
    *this = ::std::move(from);
  }

  inline Progress& operator=(const Progress& from) {
    CopyFrom(from);
    return *this;
  }
  inline Progress& operator=(Progress&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Progress& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Progress* internal_default_instance() {
    return reinterpret_cast<const Progress*>(
               &_Progress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Progress& a, Progress& b) {
    a.Swap(&b);
  }
  inline void Swap(Progress* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Progress* New() const final {
    return CreateMaybeMessage<Progress>(nullptr);
  }

  Progress* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Progress>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Progress& from);
  void MergeFrom(const Progress& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Progress* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cura.proto.Progress";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Cura_2eproto);
    return ::descriptor_table_Cura_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAmountFieldNumber = 1,
  };
  // float amount = 1;
  void clear_amount();
  float amount() const;
  void set_amount(float value);
  private:
  float _internal_amount() const;
  void _internal_set_amount(float value);
  public:

  // @@protoc_insertion_point(class_scope:cura.proto.Progress)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float amount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Cura_2eproto;
};
// -------------------------------------------------------------------

class Layer :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cura.proto.Layer) */ {
 public:
  Layer();
  virtual ~Layer();

  Layer(const Layer& from);
  Layer(Layer&& from) noexcept
    : Layer() {
    *this = ::std::move(from);
  }

  inline Layer& operator=(const Layer& from) {
    CopyFrom(from);
    return *this;
  }
  inline Layer& operator=(Layer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Layer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Layer* internal_default_instance() {
    return reinterpret_cast<const Layer*>(
               &_Layer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Layer& a, Layer& b) {
    a.Swap(&b);
  }
  inline void Swap(Layer* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Layer* New() const final {
    return CreateMaybeMessage<Layer>(nullptr);
  }

  Layer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Layer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Layer& from);
  void MergeFrom(const Layer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Layer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cura.proto.Layer";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Cura_2eproto);
    return ::descriptor_table_Cura_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPolygonsFieldNumber = 4,
    kIdFieldNumber = 1,
    kHeightFieldNumber = 2,
    kThicknessFieldNumber = 3,
  };
  // repeated .cura.proto.Polygon polygons = 4;
  int polygons_size() const;
  private:
  int _internal_polygons_size() const;
  public:
  void clear_polygons();
  ::cura::proto::Polygon* mutable_polygons(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cura::proto::Polygon >*
      mutable_polygons();
  private:
  const ::cura::proto::Polygon& _internal_polygons(int index) const;
  ::cura::proto::Polygon* _internal_add_polygons();
  public:
  const ::cura::proto::Polygon& polygons(int index) const;
  ::cura::proto::Polygon* add_polygons();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cura::proto::Polygon >&
      polygons() const;

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float height = 2;
  void clear_height();
  float height() const;
  void set_height(float value);
  private:
  float _internal_height() const;
  void _internal_set_height(float value);
  public:

  // float thickness = 3;
  void clear_thickness();
  float thickness() const;
  void set_thickness(float value);
  private:
  float _internal_thickness() const;
  void _internal_set_thickness(float value);
  public:

  // @@protoc_insertion_point(class_scope:cura.proto.Layer)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cura::proto::Polygon > polygons_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  float height_;
  float thickness_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Cura_2eproto;
};
// -------------------------------------------------------------------

class Polygon :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cura.proto.Polygon) */ {
 public:
  Polygon();
  virtual ~Polygon();

  Polygon(const Polygon& from);
  Polygon(Polygon&& from) noexcept
    : Polygon() {
    *this = ::std::move(from);
  }

  inline Polygon& operator=(const Polygon& from) {
    CopyFrom(from);
    return *this;
  }
  inline Polygon& operator=(Polygon&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Polygon& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Polygon* internal_default_instance() {
    return reinterpret_cast<const Polygon*>(
               &_Polygon_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Polygon& a, Polygon& b) {
    a.Swap(&b);
  }
  inline void Swap(Polygon* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Polygon* New() const final {
    return CreateMaybeMessage<Polygon>(nullptr);
  }

  Polygon* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Polygon>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Polygon& from);
  void MergeFrom(const Polygon& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Polygon* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cura.proto.Polygon";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Cura_2eproto);
    return ::descriptor_table_Cura_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Polygon_Type Type;
  static constexpr Type NoneType =
    Polygon_Type_NoneType;
  static constexpr Type Inset0Type =
    Polygon_Type_Inset0Type;
  static constexpr Type InsetXType =
    Polygon_Type_InsetXType;
  static constexpr Type SkinType =
    Polygon_Type_SkinType;
  static constexpr Type SupportType =
    Polygon_Type_SupportType;
  static constexpr Type SkirtType =
    Polygon_Type_SkirtType;
  static constexpr Type InfillType =
    Polygon_Type_InfillType;
  static constexpr Type SupportInfillType =
    Polygon_Type_SupportInfillType;
  static constexpr Type MoveCombingType =
    Polygon_Type_MoveCombingType;
  static constexpr Type MoveRetractionType =
    Polygon_Type_MoveRetractionType;
  static constexpr Type SupportInterfaceType =
    Polygon_Type_SupportInterfaceType;
  static constexpr Type PrimeTowerType =
    Polygon_Type_PrimeTowerType;
  static inline bool Type_IsValid(int value) {
    return Polygon_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    Polygon_Type_Type_MIN;
  static constexpr Type Type_MAX =
    Polygon_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    Polygon_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return Polygon_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return Polygon_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(const std::string& name,
      Type* value) {
    return Polygon_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPointsFieldNumber = 2,
    kTypeFieldNumber = 1,
    kLineWidthFieldNumber = 3,
    kLineThicknessFieldNumber = 4,
    kLineFeedrateFieldNumber = 5,
  };
  // bytes points = 2;
  void clear_points();
  const std::string& points() const;
  void set_points(const std::string& value);
  void set_points(std::string&& value);
  void set_points(const char* value);
  void set_points(const void* value, size_t size);
  std::string* mutable_points();
  std::string* release_points();
  void set_allocated_points(std::string* points);
  private:
  const std::string& _internal_points() const;
  void _internal_set_points(const std::string& value);
  std::string* _internal_mutable_points();
  public:

  // .cura.proto.Polygon.Type type = 1;
  void clear_type();
  ::cura::proto::Polygon_Type type() const;
  void set_type(::cura::proto::Polygon_Type value);
  private:
  ::cura::proto::Polygon_Type _internal_type() const;
  void _internal_set_type(::cura::proto::Polygon_Type value);
  public:

  // float line_width = 3;
  void clear_line_width();
  float line_width() const;
  void set_line_width(float value);
  private:
  float _internal_line_width() const;
  void _internal_set_line_width(float value);
  public:

  // float line_thickness = 4;
  void clear_line_thickness();
  float line_thickness() const;
  void set_line_thickness(float value);
  private:
  float _internal_line_thickness() const;
  void _internal_set_line_thickness(float value);
  public:

  // float line_feedrate = 5;
  void clear_line_feedrate();
  float line_feedrate() const;
  void set_line_feedrate(float value);
  private:
  float _internal_line_feedrate() const;
  void _internal_set_line_feedrate(float value);
  public:

  // @@protoc_insertion_point(class_scope:cura.proto.Polygon)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr points_;
  int type_;
  float line_width_;
  float line_thickness_;
  float line_feedrate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Cura_2eproto;
};
// -------------------------------------------------------------------

class LayerOptimized :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cura.proto.LayerOptimized) */ {
 public:
  LayerOptimized();
  virtual ~LayerOptimized();

  LayerOptimized(const LayerOptimized& from);
  LayerOptimized(LayerOptimized&& from) noexcept
    : LayerOptimized() {
    *this = ::std::move(from);
  }

  inline LayerOptimized& operator=(const LayerOptimized& from) {
    CopyFrom(from);
    return *this;
  }
  inline LayerOptimized& operator=(LayerOptimized&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LayerOptimized& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LayerOptimized* internal_default_instance() {
    return reinterpret_cast<const LayerOptimized*>(
               &_LayerOptimized_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(LayerOptimized& a, LayerOptimized& b) {
    a.Swap(&b);
  }
  inline void Swap(LayerOptimized* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LayerOptimized* New() const final {
    return CreateMaybeMessage<LayerOptimized>(nullptr);
  }

  LayerOptimized* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LayerOptimized>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LayerOptimized& from);
  void MergeFrom(const LayerOptimized& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LayerOptimized* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cura.proto.LayerOptimized";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Cura_2eproto);
    return ::descriptor_table_Cura_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathSegmentFieldNumber = 4,
    kIdFieldNumber = 1,
    kHeightFieldNumber = 2,
    kThicknessFieldNumber = 3,
  };
  // repeated .cura.proto.PathSegment path_segment = 4;
  int path_segment_size() const;
  private:
  int _internal_path_segment_size() const;
  public:
  void clear_path_segment();
  ::cura::proto::PathSegment* mutable_path_segment(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cura::proto::PathSegment >*
      mutable_path_segment();
  private:
  const ::cura::proto::PathSegment& _internal_path_segment(int index) const;
  ::cura::proto::PathSegment* _internal_add_path_segment();
  public:
  const ::cura::proto::PathSegment& path_segment(int index) const;
  ::cura::proto::PathSegment* add_path_segment();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cura::proto::PathSegment >&
      path_segment() const;

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float height = 2;
  void clear_height();
  float height() const;
  void set_height(float value);
  private:
  float _internal_height() const;
  void _internal_set_height(float value);
  public:

  // float thickness = 3;
  void clear_thickness();
  float thickness() const;
  void set_thickness(float value);
  private:
  float _internal_thickness() const;
  void _internal_set_thickness(float value);
  public:

  // @@protoc_insertion_point(class_scope:cura.proto.LayerOptimized)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cura::proto::PathSegment > path_segment_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  float height_;
  float thickness_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Cura_2eproto;
};
// -------------------------------------------------------------------

class PathSegment :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cura.proto.PathSegment) */ {
 public:
  PathSegment();
  virtual ~PathSegment();

  PathSegment(const PathSegment& from);
  PathSegment(PathSegment&& from) noexcept
    : PathSegment() {
    *this = ::std::move(from);
  }

  inline PathSegment& operator=(const PathSegment& from) {
    CopyFrom(from);
    return *this;
  }
  inline PathSegment& operator=(PathSegment&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PathSegment& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PathSegment* internal_default_instance() {
    return reinterpret_cast<const PathSegment*>(
               &_PathSegment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(PathSegment& a, PathSegment& b) {
    a.Swap(&b);
  }
  inline void Swap(PathSegment* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PathSegment* New() const final {
    return CreateMaybeMessage<PathSegment>(nullptr);
  }

  PathSegment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PathSegment>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PathSegment& from);
  void MergeFrom(const PathSegment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PathSegment* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cura.proto.PathSegment";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Cura_2eproto);
    return ::descriptor_table_Cura_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef PathSegment_PointType PointType;
  static constexpr PointType Point2D =
    PathSegment_PointType_Point2D;
  static constexpr PointType Point3D =
    PathSegment_PointType_Point3D;
  static inline bool PointType_IsValid(int value) {
    return PathSegment_PointType_IsValid(value);
  }
  static constexpr PointType PointType_MIN =
    PathSegment_PointType_PointType_MIN;
  static constexpr PointType PointType_MAX =
    PathSegment_PointType_PointType_MAX;
  static constexpr int PointType_ARRAYSIZE =
    PathSegment_PointType_PointType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  PointType_descriptor() {
    return PathSegment_PointType_descriptor();
  }
  template<typename T>
  static inline const std::string& PointType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PointType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PointType_Name.");
    return PathSegment_PointType_Name(enum_t_value);
  }
  static inline bool PointType_Parse(const std::string& name,
      PointType* value) {
    return PathSegment_PointType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPointsFieldNumber = 3,
    kLineTypeFieldNumber = 4,
    kLineWidthFieldNumber = 5,
    kLineThicknessFieldNumber = 6,
    kLineFeedrateFieldNumber = 7,
    kExtruderFieldNumber = 1,
    kPointTypeFieldNumber = 2,
  };
  // bytes points = 3;
  void clear_points();
  const std::string& points() const;
  void set_points(const std::string& value);
  void set_points(std::string&& value);
  void set_points(const char* value);
  void set_points(const void* value, size_t size);
  std::string* mutable_points();
  std::string* release_points();
  void set_allocated_points(std::string* points);
  private:
  const std::string& _internal_points() const;
  void _internal_set_points(const std::string& value);
  std::string* _internal_mutable_points();
  public:

  // bytes line_type = 4;
  void clear_line_type();
  const std::string& line_type() const;
  void set_line_type(const std::string& value);
  void set_line_type(std::string&& value);
  void set_line_type(const char* value);
  void set_line_type(const void* value, size_t size);
  std::string* mutable_line_type();
  std::string* release_line_type();
  void set_allocated_line_type(std::string* line_type);
  private:
  const std::string& _internal_line_type() const;
  void _internal_set_line_type(const std::string& value);
  std::string* _internal_mutable_line_type();
  public:

  // bytes line_width = 5;
  void clear_line_width();
  const std::string& line_width() const;
  void set_line_width(const std::string& value);
  void set_line_width(std::string&& value);
  void set_line_width(const char* value);
  void set_line_width(const void* value, size_t size);
  std::string* mutable_line_width();
  std::string* release_line_width();
  void set_allocated_line_width(std::string* line_width);
  private:
  const std::string& _internal_line_width() const;
  void _internal_set_line_width(const std::string& value);
  std::string* _internal_mutable_line_width();
  public:

  // bytes line_thickness = 6;
  void clear_line_thickness();
  const std::string& line_thickness() const;
  void set_line_thickness(const std::string& value);
  void set_line_thickness(std::string&& value);
  void set_line_thickness(const char* value);
  void set_line_thickness(const void* value, size_t size);
  std::string* mutable_line_thickness();
  std::string* release_line_thickness();
  void set_allocated_line_thickness(std::string* line_thickness);
  private:
  const std::string& _internal_line_thickness() const;
  void _internal_set_line_thickness(const std::string& value);
  std::string* _internal_mutable_line_thickness();
  public:

  // bytes line_feedrate = 7;
  void clear_line_feedrate();
  const std::string& line_feedrate() const;
  void set_line_feedrate(const std::string& value);
  void set_line_feedrate(std::string&& value);
  void set_line_feedrate(const char* value);
  void set_line_feedrate(const void* value, size_t size);
  std::string* mutable_line_feedrate();
  std::string* release_line_feedrate();
  void set_allocated_line_feedrate(std::string* line_feedrate);
  private:
  const std::string& _internal_line_feedrate() const;
  void _internal_set_line_feedrate(const std::string& value);
  std::string* _internal_mutable_line_feedrate();
  public:

  // int32 extruder = 1;
  void clear_extruder();
  ::PROTOBUF_NAMESPACE_ID::int32 extruder() const;
  void set_extruder(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_extruder() const;
  void _internal_set_extruder(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .cura.proto.PathSegment.PointType point_type = 2;
  void clear_point_type();
  ::cura::proto::PathSegment_PointType point_type() const;
  void set_point_type(::cura::proto::PathSegment_PointType value);
  private:
  ::cura::proto::PathSegment_PointType _internal_point_type() const;
  void _internal_set_point_type(::cura::proto::PathSegment_PointType value);
  public:

  // @@protoc_insertion_point(class_scope:cura.proto.PathSegment)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr points_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr line_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr line_width_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr line_thickness_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr line_feedrate_;
  ::PROTOBUF_NAMESPACE_ID::int32 extruder_;
  int point_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Cura_2eproto;
};
// -------------------------------------------------------------------

class GCodeLayer :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cura.proto.GCodeLayer) */ {
 public:
  GCodeLayer();
  virtual ~GCodeLayer();

  GCodeLayer(const GCodeLayer& from);
  GCodeLayer(GCodeLayer&& from) noexcept
    : GCodeLayer() {
    *this = ::std::move(from);
  }

  inline GCodeLayer& operator=(const GCodeLayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCodeLayer& operator=(GCodeLayer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GCodeLayer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GCodeLayer* internal_default_instance() {
    return reinterpret_cast<const GCodeLayer*>(
               &_GCodeLayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(GCodeLayer& a, GCodeLayer& b) {
    a.Swap(&b);
  }
  inline void Swap(GCodeLayer* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GCodeLayer* New() const final {
    return CreateMaybeMessage<GCodeLayer>(nullptr);
  }

  GCodeLayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GCodeLayer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GCodeLayer& from);
  void MergeFrom(const GCodeLayer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCodeLayer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cura.proto.GCodeLayer";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Cura_2eproto);
    return ::descriptor_table_Cura_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
  };
  // bytes data = 2;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:cura.proto.GCodeLayer)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Cura_2eproto;
};
// -------------------------------------------------------------------

class PrintTimeMaterialEstimates :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cura.proto.PrintTimeMaterialEstimates) */ {
 public:
  PrintTimeMaterialEstimates();
  virtual ~PrintTimeMaterialEstimates();

  PrintTimeMaterialEstimates(const PrintTimeMaterialEstimates& from);
  PrintTimeMaterialEstimates(PrintTimeMaterialEstimates&& from) noexcept
    : PrintTimeMaterialEstimates() {
    *this = ::std::move(from);
  }

  inline PrintTimeMaterialEstimates& operator=(const PrintTimeMaterialEstimates& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrintTimeMaterialEstimates& operator=(PrintTimeMaterialEstimates&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PrintTimeMaterialEstimates& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PrintTimeMaterialEstimates* internal_default_instance() {
    return reinterpret_cast<const PrintTimeMaterialEstimates*>(
               &_PrintTimeMaterialEstimates_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(PrintTimeMaterialEstimates& a, PrintTimeMaterialEstimates& b) {
    a.Swap(&b);
  }
  inline void Swap(PrintTimeMaterialEstimates* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PrintTimeMaterialEstimates* New() const final {
    return CreateMaybeMessage<PrintTimeMaterialEstimates>(nullptr);
  }

  PrintTimeMaterialEstimates* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PrintTimeMaterialEstimates>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PrintTimeMaterialEstimates& from);
  void MergeFrom(const PrintTimeMaterialEstimates& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrintTimeMaterialEstimates* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cura.proto.PrintTimeMaterialEstimates";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Cura_2eproto);
    return ::descriptor_table_Cura_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaterialEstimatesFieldNumber = 13,
    kTimeNoneFieldNumber = 1,
    kTimeInset0FieldNumber = 2,
    kTimeInsetXFieldNumber = 3,
    kTimeSkinFieldNumber = 4,
    kTimeSupportFieldNumber = 5,
    kTimeSkirtFieldNumber = 6,
    kTimeInfillFieldNumber = 7,
    kTimeSupportInfillFieldNumber = 8,
    kTimeTravelFieldNumber = 9,
    kTimeRetractFieldNumber = 10,
    kTimeSupportInterfaceFieldNumber = 11,
    kTimePrimeTowerFieldNumber = 12,
  };
  // repeated .cura.proto.MaterialEstimates materialEstimates = 13;
  int materialestimates_size() const;
  private:
  int _internal_materialestimates_size() const;
  public:
  void clear_materialestimates();
  ::cura::proto::MaterialEstimates* mutable_materialestimates(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cura::proto::MaterialEstimates >*
      mutable_materialestimates();
  private:
  const ::cura::proto::MaterialEstimates& _internal_materialestimates(int index) const;
  ::cura::proto::MaterialEstimates* _internal_add_materialestimates();
  public:
  const ::cura::proto::MaterialEstimates& materialestimates(int index) const;
  ::cura::proto::MaterialEstimates* add_materialestimates();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cura::proto::MaterialEstimates >&
      materialestimates() const;

  // float time_none = 1;
  void clear_time_none();
  float time_none() const;
  void set_time_none(float value);
  private:
  float _internal_time_none() const;
  void _internal_set_time_none(float value);
  public:

  // float time_inset_0 = 2;
  void clear_time_inset_0();
  float time_inset_0() const;
  void set_time_inset_0(float value);
  private:
  float _internal_time_inset_0() const;
  void _internal_set_time_inset_0(float value);
  public:

  // float time_inset_x = 3;
  void clear_time_inset_x();
  float time_inset_x() const;
  void set_time_inset_x(float value);
  private:
  float _internal_time_inset_x() const;
  void _internal_set_time_inset_x(float value);
  public:

  // float time_skin = 4;
  void clear_time_skin();
  float time_skin() const;
  void set_time_skin(float value);
  private:
  float _internal_time_skin() const;
  void _internal_set_time_skin(float value);
  public:

  // float time_support = 5;
  void clear_time_support();
  float time_support() const;
  void set_time_support(float value);
  private:
  float _internal_time_support() const;
  void _internal_set_time_support(float value);
  public:

  // float time_skirt = 6;
  void clear_time_skirt();
  float time_skirt() const;
  void set_time_skirt(float value);
  private:
  float _internal_time_skirt() const;
  void _internal_set_time_skirt(float value);
  public:

  // float time_infill = 7;
  void clear_time_infill();
  float time_infill() const;
  void set_time_infill(float value);
  private:
  float _internal_time_infill() const;
  void _internal_set_time_infill(float value);
  public:

  // float time_support_infill = 8;
  void clear_time_support_infill();
  float time_support_infill() const;
  void set_time_support_infill(float value);
  private:
  float _internal_time_support_infill() const;
  void _internal_set_time_support_infill(float value);
  public:

  // float time_travel = 9;
  void clear_time_travel();
  float time_travel() const;
  void set_time_travel(float value);
  private:
  float _internal_time_travel() const;
  void _internal_set_time_travel(float value);
  public:

  // float time_retract = 10;
  void clear_time_retract();
  float time_retract() const;
  void set_time_retract(float value);
  private:
  float _internal_time_retract() const;
  void _internal_set_time_retract(float value);
  public:

  // float time_support_interface = 11;
  void clear_time_support_interface();
  float time_support_interface() const;
  void set_time_support_interface(float value);
  private:
  float _internal_time_support_interface() const;
  void _internal_set_time_support_interface(float value);
  public:

  // float time_prime_tower = 12;
  void clear_time_prime_tower();
  float time_prime_tower() const;
  void set_time_prime_tower(float value);
  private:
  float _internal_time_prime_tower() const;
  void _internal_set_time_prime_tower(float value);
  public:

  // @@protoc_insertion_point(class_scope:cura.proto.PrintTimeMaterialEstimates)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cura::proto::MaterialEstimates > materialestimates_;
  float time_none_;
  float time_inset_0_;
  float time_inset_x_;
  float time_skin_;
  float time_support_;
  float time_skirt_;
  float time_infill_;
  float time_support_infill_;
  float time_travel_;
  float time_retract_;
  float time_support_interface_;
  float time_prime_tower_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Cura_2eproto;
};
// -------------------------------------------------------------------

class MaterialEstimates :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cura.proto.MaterialEstimates) */ {
 public:
  MaterialEstimates();
  virtual ~MaterialEstimates();

  MaterialEstimates(const MaterialEstimates& from);
  MaterialEstimates(MaterialEstimates&& from) noexcept
    : MaterialEstimates() {
    *this = ::std::move(from);
  }

  inline MaterialEstimates& operator=(const MaterialEstimates& from) {
    CopyFrom(from);
    return *this;
  }
  inline MaterialEstimates& operator=(MaterialEstimates&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MaterialEstimates& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MaterialEstimates* internal_default_instance() {
    return reinterpret_cast<const MaterialEstimates*>(
               &_MaterialEstimates_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(MaterialEstimates& a, MaterialEstimates& b) {
    a.Swap(&b);
  }
  inline void Swap(MaterialEstimates* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MaterialEstimates* New() const final {
    return CreateMaybeMessage<MaterialEstimates>(nullptr);
  }

  MaterialEstimates* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MaterialEstimates>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MaterialEstimates& from);
  void MergeFrom(const MaterialEstimates& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MaterialEstimates* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cura.proto.MaterialEstimates";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Cura_2eproto);
    return ::descriptor_table_Cura_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kMaterialAmountFieldNumber = 2,
  };
  // int64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // float material_amount = 2;
  void clear_material_amount();
  float material_amount() const;
  void set_material_amount(float value);
  private:
  float _internal_material_amount() const;
  void _internal_set_material_amount(float value);
  public:

  // @@protoc_insertion_point(class_scope:cura.proto.MaterialEstimates)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  float material_amount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Cura_2eproto;
};
// -------------------------------------------------------------------

class SettingList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cura.proto.SettingList) */ {
 public:
  SettingList();
  virtual ~SettingList();

  SettingList(const SettingList& from);
  SettingList(SettingList&& from) noexcept
    : SettingList() {
    *this = ::std::move(from);
  }

  inline SettingList& operator=(const SettingList& from) {
    CopyFrom(from);
    return *this;
  }
  inline SettingList& operator=(SettingList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SettingList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SettingList* internal_default_instance() {
    return reinterpret_cast<const SettingList*>(
               &_SettingList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(SettingList& a, SettingList& b) {
    a.Swap(&b);
  }
  inline void Swap(SettingList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SettingList* New() const final {
    return CreateMaybeMessage<SettingList>(nullptr);
  }

  SettingList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SettingList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SettingList& from);
  void MergeFrom(const SettingList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SettingList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cura.proto.SettingList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Cura_2eproto);
    return ::descriptor_table_Cura_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSettingsFieldNumber = 1,
  };
  // repeated .cura.proto.Setting settings = 1;
  int settings_size() const;
  private:
  int _internal_settings_size() const;
  public:
  void clear_settings();
  ::cura::proto::Setting* mutable_settings(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cura::proto::Setting >*
      mutable_settings();
  private:
  const ::cura::proto::Setting& _internal_settings(int index) const;
  ::cura::proto::Setting* _internal_add_settings();
  public:
  const ::cura::proto::Setting& settings(int index) const;
  ::cura::proto::Setting* add_settings();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cura::proto::Setting >&
      settings() const;

  // @@protoc_insertion_point(class_scope:cura.proto.SettingList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cura::proto::Setting > settings_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Cura_2eproto;
};
// -------------------------------------------------------------------

class Setting :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cura.proto.Setting) */ {
 public:
  Setting();
  virtual ~Setting();

  Setting(const Setting& from);
  Setting(Setting&& from) noexcept
    : Setting() {
    *this = ::std::move(from);
  }

  inline Setting& operator=(const Setting& from) {
    CopyFrom(from);
    return *this;
  }
  inline Setting& operator=(Setting&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Setting& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Setting* internal_default_instance() {
    return reinterpret_cast<const Setting*>(
               &_Setting_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(Setting& a, Setting& b) {
    a.Swap(&b);
  }
  inline void Swap(Setting* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Setting* New() const final {
    return CreateMaybeMessage<Setting>(nullptr);
  }

  Setting* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Setting>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Setting& from);
  void MergeFrom(const Setting& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Setting* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cura.proto.Setting";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Cura_2eproto);
    return ::descriptor_table_Cura_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bytes value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:cura.proto.Setting)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Cura_2eproto;
};
// -------------------------------------------------------------------

class SettingExtruder :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cura.proto.SettingExtruder) */ {
 public:
  SettingExtruder();
  virtual ~SettingExtruder();

  SettingExtruder(const SettingExtruder& from);
  SettingExtruder(SettingExtruder&& from) noexcept
    : SettingExtruder() {
    *this = ::std::move(from);
  }

  inline SettingExtruder& operator=(const SettingExtruder& from) {
    CopyFrom(from);
    return *this;
  }
  inline SettingExtruder& operator=(SettingExtruder&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SettingExtruder& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SettingExtruder* internal_default_instance() {
    return reinterpret_cast<const SettingExtruder*>(
               &_SettingExtruder_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(SettingExtruder& a, SettingExtruder& b) {
    a.Swap(&b);
  }
  inline void Swap(SettingExtruder* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SettingExtruder* New() const final {
    return CreateMaybeMessage<SettingExtruder>(nullptr);
  }

  SettingExtruder* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SettingExtruder>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SettingExtruder& from);
  void MergeFrom(const SettingExtruder& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SettingExtruder* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cura.proto.SettingExtruder";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Cura_2eproto);
    return ::descriptor_table_Cura_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kExtruderFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 extruder = 2;
  void clear_extruder();
  ::PROTOBUF_NAMESPACE_ID::int32 extruder() const;
  void set_extruder(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_extruder() const;
  void _internal_set_extruder(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:cura.proto.SettingExtruder)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 extruder_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Cura_2eproto;
};
// -------------------------------------------------------------------

class GCodePrefix :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cura.proto.GCodePrefix) */ {
 public:
  GCodePrefix();
  virtual ~GCodePrefix();

  GCodePrefix(const GCodePrefix& from);
  GCodePrefix(GCodePrefix&& from) noexcept
    : GCodePrefix() {
    *this = ::std::move(from);
  }

  inline GCodePrefix& operator=(const GCodePrefix& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCodePrefix& operator=(GCodePrefix&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GCodePrefix& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GCodePrefix* internal_default_instance() {
    return reinterpret_cast<const GCodePrefix*>(
               &_GCodePrefix_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(GCodePrefix& a, GCodePrefix& b) {
    a.Swap(&b);
  }
  inline void Swap(GCodePrefix* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GCodePrefix* New() const final {
    return CreateMaybeMessage<GCodePrefix>(nullptr);
  }

  GCodePrefix* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GCodePrefix>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GCodePrefix& from);
  void MergeFrom(const GCodePrefix& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCodePrefix* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cura.proto.GCodePrefix";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Cura_2eproto);
    return ::descriptor_table_Cura_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
  };
  // bytes data = 2;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:cura.proto.GCodePrefix)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Cura_2eproto;
};
// -------------------------------------------------------------------

class SlicingFinished :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cura.proto.SlicingFinished) */ {
 public:
  SlicingFinished();
  virtual ~SlicingFinished();

  SlicingFinished(const SlicingFinished& from);
  SlicingFinished(SlicingFinished&& from) noexcept
    : SlicingFinished() {
    *this = ::std::move(from);
  }

  inline SlicingFinished& operator=(const SlicingFinished& from) {
    CopyFrom(from);
    return *this;
  }
  inline SlicingFinished& operator=(SlicingFinished&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SlicingFinished& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SlicingFinished* internal_default_instance() {
    return reinterpret_cast<const SlicingFinished*>(
               &_SlicingFinished_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(SlicingFinished& a, SlicingFinished& b) {
    a.Swap(&b);
  }
  inline void Swap(SlicingFinished* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SlicingFinished* New() const final {
    return CreateMaybeMessage<SlicingFinished>(nullptr);
  }

  SlicingFinished* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SlicingFinished>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SlicingFinished& from);
  void MergeFrom(const SlicingFinished& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SlicingFinished* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cura.proto.SlicingFinished";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Cura_2eproto);
    return ::descriptor_table_Cura_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:cura.proto.SlicingFinished)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Cura_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ObjectList

// repeated .cura.proto.Object objects = 1;
inline int ObjectList::_internal_objects_size() const {
  return objects_.size();
}
inline int ObjectList::objects_size() const {
  return _internal_objects_size();
}
inline void ObjectList::clear_objects() {
  objects_.Clear();
}
inline ::cura::proto::Object* ObjectList::mutable_objects(int index) {
  // @@protoc_insertion_point(field_mutable:cura.proto.ObjectList.objects)
  return objects_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cura::proto::Object >*
ObjectList::mutable_objects() {
  // @@protoc_insertion_point(field_mutable_list:cura.proto.ObjectList.objects)
  return &objects_;
}
inline const ::cura::proto::Object& ObjectList::_internal_objects(int index) const {
  return objects_.Get(index);
}
inline const ::cura::proto::Object& ObjectList::objects(int index) const {
  // @@protoc_insertion_point(field_get:cura.proto.ObjectList.objects)
  return _internal_objects(index);
}
inline ::cura::proto::Object* ObjectList::_internal_add_objects() {
  return objects_.Add();
}
inline ::cura::proto::Object* ObjectList::add_objects() {
  // @@protoc_insertion_point(field_add:cura.proto.ObjectList.objects)
  return _internal_add_objects();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cura::proto::Object >&
ObjectList::objects() const {
  // @@protoc_insertion_point(field_list:cura.proto.ObjectList.objects)
  return objects_;
}

// repeated .cura.proto.Setting settings = 2;
inline int ObjectList::_internal_settings_size() const {
  return settings_.size();
}
inline int ObjectList::settings_size() const {
  return _internal_settings_size();
}
inline void ObjectList::clear_settings() {
  settings_.Clear();
}
inline ::cura::proto::Setting* ObjectList::mutable_settings(int index) {
  // @@protoc_insertion_point(field_mutable:cura.proto.ObjectList.settings)
  return settings_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cura::proto::Setting >*
ObjectList::mutable_settings() {
  // @@protoc_insertion_point(field_mutable_list:cura.proto.ObjectList.settings)
  return &settings_;
}
inline const ::cura::proto::Setting& ObjectList::_internal_settings(int index) const {
  return settings_.Get(index);
}
inline const ::cura::proto::Setting& ObjectList::settings(int index) const {
  // @@protoc_insertion_point(field_get:cura.proto.ObjectList.settings)
  return _internal_settings(index);
}
inline ::cura::proto::Setting* ObjectList::_internal_add_settings() {
  return settings_.Add();
}
inline ::cura::proto::Setting* ObjectList::add_settings() {
  // @@protoc_insertion_point(field_add:cura.proto.ObjectList.settings)
  return _internal_add_settings();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cura::proto::Setting >&
ObjectList::settings() const {
  // @@protoc_insertion_point(field_list:cura.proto.ObjectList.settings)
  return settings_;
}

// -------------------------------------------------------------------

// Slice

// repeated .cura.proto.ObjectList object_lists = 1;
inline int Slice::_internal_object_lists_size() const {
  return object_lists_.size();
}
inline int Slice::object_lists_size() const {
  return _internal_object_lists_size();
}
inline void Slice::clear_object_lists() {
  object_lists_.Clear();
}
inline ::cura::proto::ObjectList* Slice::mutable_object_lists(int index) {
  // @@protoc_insertion_point(field_mutable:cura.proto.Slice.object_lists)
  return object_lists_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cura::proto::ObjectList >*
Slice::mutable_object_lists() {
  // @@protoc_insertion_point(field_mutable_list:cura.proto.Slice.object_lists)
  return &object_lists_;
}
inline const ::cura::proto::ObjectList& Slice::_internal_object_lists(int index) const {
  return object_lists_.Get(index);
}
inline const ::cura::proto::ObjectList& Slice::object_lists(int index) const {
  // @@protoc_insertion_point(field_get:cura.proto.Slice.object_lists)
  return _internal_object_lists(index);
}
inline ::cura::proto::ObjectList* Slice::_internal_add_object_lists() {
  return object_lists_.Add();
}
inline ::cura::proto::ObjectList* Slice::add_object_lists() {
  // @@protoc_insertion_point(field_add:cura.proto.Slice.object_lists)
  return _internal_add_object_lists();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cura::proto::ObjectList >&
Slice::object_lists() const {
  // @@protoc_insertion_point(field_list:cura.proto.Slice.object_lists)
  return object_lists_;
}

// .cura.proto.SettingList global_settings = 2;
inline bool Slice::_internal_has_global_settings() const {
  return this != internal_default_instance() && global_settings_ != nullptr;
}
inline bool Slice::has_global_settings() const {
  return _internal_has_global_settings();
}
inline void Slice::clear_global_settings() {
  if (GetArenaNoVirtual() == nullptr && global_settings_ != nullptr) {
    delete global_settings_;
  }
  global_settings_ = nullptr;
}
inline const ::cura::proto::SettingList& Slice::_internal_global_settings() const {
  const ::cura::proto::SettingList* p = global_settings_;
  return p != nullptr ? *p : *reinterpret_cast<const ::cura::proto::SettingList*>(
      &::cura::proto::_SettingList_default_instance_);
}
inline const ::cura::proto::SettingList& Slice::global_settings() const {
  // @@protoc_insertion_point(field_get:cura.proto.Slice.global_settings)
  return _internal_global_settings();
}
inline ::cura::proto::SettingList* Slice::release_global_settings() {
  // @@protoc_insertion_point(field_release:cura.proto.Slice.global_settings)
  
  ::cura::proto::SettingList* temp = global_settings_;
  global_settings_ = nullptr;
  return temp;
}
inline ::cura::proto::SettingList* Slice::_internal_mutable_global_settings() {
  
  if (global_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::cura::proto::SettingList>(GetArenaNoVirtual());
    global_settings_ = p;
  }
  return global_settings_;
}
inline ::cura::proto::SettingList* Slice::mutable_global_settings() {
  // @@protoc_insertion_point(field_mutable:cura.proto.Slice.global_settings)
  return _internal_mutable_global_settings();
}
inline void Slice::set_allocated_global_settings(::cura::proto::SettingList* global_settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete global_settings_;
  }
  if (global_settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      global_settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, global_settings, submessage_arena);
    }
    
  } else {
    
  }
  global_settings_ = global_settings;
  // @@protoc_insertion_point(field_set_allocated:cura.proto.Slice.global_settings)
}

// repeated .cura.proto.Extruder extruders = 3;
inline int Slice::_internal_extruders_size() const {
  return extruders_.size();
}
inline int Slice::extruders_size() const {
  return _internal_extruders_size();
}
inline void Slice::clear_extruders() {
  extruders_.Clear();
}
inline ::cura::proto::Extruder* Slice::mutable_extruders(int index) {
  // @@protoc_insertion_point(field_mutable:cura.proto.Slice.extruders)
  return extruders_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cura::proto::Extruder >*
Slice::mutable_extruders() {
  // @@protoc_insertion_point(field_mutable_list:cura.proto.Slice.extruders)
  return &extruders_;
}
inline const ::cura::proto::Extruder& Slice::_internal_extruders(int index) const {
  return extruders_.Get(index);
}
inline const ::cura::proto::Extruder& Slice::extruders(int index) const {
  // @@protoc_insertion_point(field_get:cura.proto.Slice.extruders)
  return _internal_extruders(index);
}
inline ::cura::proto::Extruder* Slice::_internal_add_extruders() {
  return extruders_.Add();
}
inline ::cura::proto::Extruder* Slice::add_extruders() {
  // @@protoc_insertion_point(field_add:cura.proto.Slice.extruders)
  return _internal_add_extruders();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cura::proto::Extruder >&
Slice::extruders() const {
  // @@protoc_insertion_point(field_list:cura.proto.Slice.extruders)
  return extruders_;
}

// repeated .cura.proto.SettingExtruder limit_to_extruder = 4;
inline int Slice::_internal_limit_to_extruder_size() const {
  return limit_to_extruder_.size();
}
inline int Slice::limit_to_extruder_size() const {
  return _internal_limit_to_extruder_size();
}
inline void Slice::clear_limit_to_extruder() {
  limit_to_extruder_.Clear();
}
inline ::cura::proto::SettingExtruder* Slice::mutable_limit_to_extruder(int index) {
  // @@protoc_insertion_point(field_mutable:cura.proto.Slice.limit_to_extruder)
  return limit_to_extruder_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cura::proto::SettingExtruder >*
Slice::mutable_limit_to_extruder() {
  // @@protoc_insertion_point(field_mutable_list:cura.proto.Slice.limit_to_extruder)
  return &limit_to_extruder_;
}
inline const ::cura::proto::SettingExtruder& Slice::_internal_limit_to_extruder(int index) const {
  return limit_to_extruder_.Get(index);
}
inline const ::cura::proto::SettingExtruder& Slice::limit_to_extruder(int index) const {
  // @@protoc_insertion_point(field_get:cura.proto.Slice.limit_to_extruder)
  return _internal_limit_to_extruder(index);
}
inline ::cura::proto::SettingExtruder* Slice::_internal_add_limit_to_extruder() {
  return limit_to_extruder_.Add();
}
inline ::cura::proto::SettingExtruder* Slice::add_limit_to_extruder() {
  // @@protoc_insertion_point(field_add:cura.proto.Slice.limit_to_extruder)
  return _internal_add_limit_to_extruder();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cura::proto::SettingExtruder >&
Slice::limit_to_extruder() const {
  // @@protoc_insertion_point(field_list:cura.proto.Slice.limit_to_extruder)
  return limit_to_extruder_;
}

// -------------------------------------------------------------------

// Extruder

// int32 id = 1;
inline void Extruder::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Extruder::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Extruder::id() const {
  // @@protoc_insertion_point(field_get:cura.proto.Extruder.id)
  return _internal_id();
}
inline void Extruder::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void Extruder::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:cura.proto.Extruder.id)
}

// .cura.proto.SettingList settings = 2;
inline bool Extruder::_internal_has_settings() const {
  return this != internal_default_instance() && settings_ != nullptr;
}
inline bool Extruder::has_settings() const {
  return _internal_has_settings();
}
inline void Extruder::clear_settings() {
  if (GetArenaNoVirtual() == nullptr && settings_ != nullptr) {
    delete settings_;
  }
  settings_ = nullptr;
}
inline const ::cura::proto::SettingList& Extruder::_internal_settings() const {
  const ::cura::proto::SettingList* p = settings_;
  return p != nullptr ? *p : *reinterpret_cast<const ::cura::proto::SettingList*>(
      &::cura::proto::_SettingList_default_instance_);
}
inline const ::cura::proto::SettingList& Extruder::settings() const {
  // @@protoc_insertion_point(field_get:cura.proto.Extruder.settings)
  return _internal_settings();
}
inline ::cura::proto::SettingList* Extruder::release_settings() {
  // @@protoc_insertion_point(field_release:cura.proto.Extruder.settings)
  
  ::cura::proto::SettingList* temp = settings_;
  settings_ = nullptr;
  return temp;
}
inline ::cura::proto::SettingList* Extruder::_internal_mutable_settings() {
  
  if (settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::cura::proto::SettingList>(GetArenaNoVirtual());
    settings_ = p;
  }
  return settings_;
}
inline ::cura::proto::SettingList* Extruder::mutable_settings() {
  // @@protoc_insertion_point(field_mutable:cura.proto.Extruder.settings)
  return _internal_mutable_settings();
}
inline void Extruder::set_allocated_settings(::cura::proto::SettingList* settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete settings_;
  }
  if (settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, settings, submessage_arena);
    }
    
  } else {
    
  }
  settings_ = settings;
  // @@protoc_insertion_point(field_set_allocated:cura.proto.Extruder.settings)
}

// -------------------------------------------------------------------

// Object

// int64 id = 1;
inline void Object::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Object::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Object::id() const {
  // @@protoc_insertion_point(field_get:cura.proto.Object.id)
  return _internal_id();
}
inline void Object::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void Object::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:cura.proto.Object.id)
}

// bytes vertices = 2;
inline void Object::clear_vertices() {
  vertices_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Object::vertices() const {
  // @@protoc_insertion_point(field_get:cura.proto.Object.vertices)
  return _internal_vertices();
}
inline void Object::set_vertices(const std::string& value) {
  _internal_set_vertices(value);
  // @@protoc_insertion_point(field_set:cura.proto.Object.vertices)
}
inline std::string* Object::mutable_vertices() {
  // @@protoc_insertion_point(field_mutable:cura.proto.Object.vertices)
  return _internal_mutable_vertices();
}
inline const std::string& Object::_internal_vertices() const {
  return vertices_.GetNoArena();
}
inline void Object::_internal_set_vertices(const std::string& value) {
  
  vertices_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Object::set_vertices(std::string&& value) {
  
  vertices_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cura.proto.Object.vertices)
}
inline void Object::set_vertices(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  vertices_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cura.proto.Object.vertices)
}
inline void Object::set_vertices(const void* value, size_t size) {
  
  vertices_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cura.proto.Object.vertices)
}
inline std::string* Object::_internal_mutable_vertices() {
  
  return vertices_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Object::release_vertices() {
  // @@protoc_insertion_point(field_release:cura.proto.Object.vertices)
  
  return vertices_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Object::set_allocated_vertices(std::string* vertices) {
  if (vertices != nullptr) {
    
  } else {
    
  }
  vertices_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vertices);
  // @@protoc_insertion_point(field_set_allocated:cura.proto.Object.vertices)
}

// bytes normals = 3;
inline void Object::clear_normals() {
  normals_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Object::normals() const {
  // @@protoc_insertion_point(field_get:cura.proto.Object.normals)
  return _internal_normals();
}
inline void Object::set_normals(const std::string& value) {
  _internal_set_normals(value);
  // @@protoc_insertion_point(field_set:cura.proto.Object.normals)
}
inline std::string* Object::mutable_normals() {
  // @@protoc_insertion_point(field_mutable:cura.proto.Object.normals)
  return _internal_mutable_normals();
}
inline const std::string& Object::_internal_normals() const {
  return normals_.GetNoArena();
}
inline void Object::_internal_set_normals(const std::string& value) {
  
  normals_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Object::set_normals(std::string&& value) {
  
  normals_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cura.proto.Object.normals)
}
inline void Object::set_normals(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  normals_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cura.proto.Object.normals)
}
inline void Object::set_normals(const void* value, size_t size) {
  
  normals_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cura.proto.Object.normals)
}
inline std::string* Object::_internal_mutable_normals() {
  
  return normals_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Object::release_normals() {
  // @@protoc_insertion_point(field_release:cura.proto.Object.normals)
  
  return normals_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Object::set_allocated_normals(std::string* normals) {
  if (normals != nullptr) {
    
  } else {
    
  }
  normals_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), normals);
  // @@protoc_insertion_point(field_set_allocated:cura.proto.Object.normals)
}

// bytes indices = 4;
inline void Object::clear_indices() {
  indices_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Object::indices() const {
  // @@protoc_insertion_point(field_get:cura.proto.Object.indices)
  return _internal_indices();
}
inline void Object::set_indices(const std::string& value) {
  _internal_set_indices(value);
  // @@protoc_insertion_point(field_set:cura.proto.Object.indices)
}
inline std::string* Object::mutable_indices() {
  // @@protoc_insertion_point(field_mutable:cura.proto.Object.indices)
  return _internal_mutable_indices();
}
inline const std::string& Object::_internal_indices() const {
  return indices_.GetNoArena();
}
inline void Object::_internal_set_indices(const std::string& value) {
  
  indices_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Object::set_indices(std::string&& value) {
  
  indices_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cura.proto.Object.indices)
}
inline void Object::set_indices(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  indices_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cura.proto.Object.indices)
}
inline void Object::set_indices(const void* value, size_t size) {
  
  indices_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cura.proto.Object.indices)
}
inline std::string* Object::_internal_mutable_indices() {
  
  return indices_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Object::release_indices() {
  // @@protoc_insertion_point(field_release:cura.proto.Object.indices)
  
  return indices_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Object::set_allocated_indices(std::string* indices) {
  if (indices != nullptr) {
    
  } else {
    
  }
  indices_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), indices);
  // @@protoc_insertion_point(field_set_allocated:cura.proto.Object.indices)
}

// repeated .cura.proto.Setting settings = 5;
inline int Object::_internal_settings_size() const {
  return settings_.size();
}
inline int Object::settings_size() const {
  return _internal_settings_size();
}
inline void Object::clear_settings() {
  settings_.Clear();
}
inline ::cura::proto::Setting* Object::mutable_settings(int index) {
  // @@protoc_insertion_point(field_mutable:cura.proto.Object.settings)
  return settings_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cura::proto::Setting >*
Object::mutable_settings() {
  // @@protoc_insertion_point(field_mutable_list:cura.proto.Object.settings)
  return &settings_;
}
inline const ::cura::proto::Setting& Object::_internal_settings(int index) const {
  return settings_.Get(index);
}
inline const ::cura::proto::Setting& Object::settings(int index) const {
  // @@protoc_insertion_point(field_get:cura.proto.Object.settings)
  return _internal_settings(index);
}
inline ::cura::proto::Setting* Object::_internal_add_settings() {
  return settings_.Add();
}
inline ::cura::proto::Setting* Object::add_settings() {
  // @@protoc_insertion_point(field_add:cura.proto.Object.settings)
  return _internal_add_settings();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cura::proto::Setting >&
Object::settings() const {
  // @@protoc_insertion_point(field_list:cura.proto.Object.settings)
  return settings_;
}

// string name = 6;
inline void Object::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Object::name() const {
  // @@protoc_insertion_point(field_get:cura.proto.Object.name)
  return _internal_name();
}
inline void Object::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:cura.proto.Object.name)
}
inline std::string* Object::mutable_name() {
  // @@protoc_insertion_point(field_mutable:cura.proto.Object.name)
  return _internal_mutable_name();
}
inline const std::string& Object::_internal_name() const {
  return name_.GetNoArena();
}
inline void Object::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Object::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cura.proto.Object.name)
}
inline void Object::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cura.proto.Object.name)
}
inline void Object::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cura.proto.Object.name)
}
inline std::string* Object::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Object::release_name() {
  // @@protoc_insertion_point(field_release:cura.proto.Object.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Object::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:cura.proto.Object.name)
}

// -------------------------------------------------------------------

// Progress

// float amount = 1;
inline void Progress::clear_amount() {
  amount_ = 0;
}
inline float Progress::_internal_amount() const {
  return amount_;
}
inline float Progress::amount() const {
  // @@protoc_insertion_point(field_get:cura.proto.Progress.amount)
  return _internal_amount();
}
inline void Progress::_internal_set_amount(float value) {
  
  amount_ = value;
}
inline void Progress::set_amount(float value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:cura.proto.Progress.amount)
}

// -------------------------------------------------------------------

// Layer

// int32 id = 1;
inline void Layer::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Layer::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Layer::id() const {
  // @@protoc_insertion_point(field_get:cura.proto.Layer.id)
  return _internal_id();
}
inline void Layer::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void Layer::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:cura.proto.Layer.id)
}

// float height = 2;
inline void Layer::clear_height() {
  height_ = 0;
}
inline float Layer::_internal_height() const {
  return height_;
}
inline float Layer::height() const {
  // @@protoc_insertion_point(field_get:cura.proto.Layer.height)
  return _internal_height();
}
inline void Layer::_internal_set_height(float value) {
  
  height_ = value;
}
inline void Layer::set_height(float value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:cura.proto.Layer.height)
}

// float thickness = 3;
inline void Layer::clear_thickness() {
  thickness_ = 0;
}
inline float Layer::_internal_thickness() const {
  return thickness_;
}
inline float Layer::thickness() const {
  // @@protoc_insertion_point(field_get:cura.proto.Layer.thickness)
  return _internal_thickness();
}
inline void Layer::_internal_set_thickness(float value) {
  
  thickness_ = value;
}
inline void Layer::set_thickness(float value) {
  _internal_set_thickness(value);
  // @@protoc_insertion_point(field_set:cura.proto.Layer.thickness)
}

// repeated .cura.proto.Polygon polygons = 4;
inline int Layer::_internal_polygons_size() const {
  return polygons_.size();
}
inline int Layer::polygons_size() const {
  return _internal_polygons_size();
}
inline void Layer::clear_polygons() {
  polygons_.Clear();
}
inline ::cura::proto::Polygon* Layer::mutable_polygons(int index) {
  // @@protoc_insertion_point(field_mutable:cura.proto.Layer.polygons)
  return polygons_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cura::proto::Polygon >*
Layer::mutable_polygons() {
  // @@protoc_insertion_point(field_mutable_list:cura.proto.Layer.polygons)
  return &polygons_;
}
inline const ::cura::proto::Polygon& Layer::_internal_polygons(int index) const {
  return polygons_.Get(index);
}
inline const ::cura::proto::Polygon& Layer::polygons(int index) const {
  // @@protoc_insertion_point(field_get:cura.proto.Layer.polygons)
  return _internal_polygons(index);
}
inline ::cura::proto::Polygon* Layer::_internal_add_polygons() {
  return polygons_.Add();
}
inline ::cura::proto::Polygon* Layer::add_polygons() {
  // @@protoc_insertion_point(field_add:cura.proto.Layer.polygons)
  return _internal_add_polygons();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cura::proto::Polygon >&
Layer::polygons() const {
  // @@protoc_insertion_point(field_list:cura.proto.Layer.polygons)
  return polygons_;
}

// -------------------------------------------------------------------

// Polygon

// .cura.proto.Polygon.Type type = 1;
inline void Polygon::clear_type() {
  type_ = 0;
}
inline ::cura::proto::Polygon_Type Polygon::_internal_type() const {
  return static_cast< ::cura::proto::Polygon_Type >(type_);
}
inline ::cura::proto::Polygon_Type Polygon::type() const {
  // @@protoc_insertion_point(field_get:cura.proto.Polygon.type)
  return _internal_type();
}
inline void Polygon::_internal_set_type(::cura::proto::Polygon_Type value) {
  
  type_ = value;
}
inline void Polygon::set_type(::cura::proto::Polygon_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:cura.proto.Polygon.type)
}

// bytes points = 2;
inline void Polygon::clear_points() {
  points_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Polygon::points() const {
  // @@protoc_insertion_point(field_get:cura.proto.Polygon.points)
  return _internal_points();
}
inline void Polygon::set_points(const std::string& value) {
  _internal_set_points(value);
  // @@protoc_insertion_point(field_set:cura.proto.Polygon.points)
}
inline std::string* Polygon::mutable_points() {
  // @@protoc_insertion_point(field_mutable:cura.proto.Polygon.points)
  return _internal_mutable_points();
}
inline const std::string& Polygon::_internal_points() const {
  return points_.GetNoArena();
}
inline void Polygon::_internal_set_points(const std::string& value) {
  
  points_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Polygon::set_points(std::string&& value) {
  
  points_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cura.proto.Polygon.points)
}
inline void Polygon::set_points(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  points_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cura.proto.Polygon.points)
}
inline void Polygon::set_points(const void* value, size_t size) {
  
  points_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cura.proto.Polygon.points)
}
inline std::string* Polygon::_internal_mutable_points() {
  
  return points_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Polygon::release_points() {
  // @@protoc_insertion_point(field_release:cura.proto.Polygon.points)
  
  return points_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Polygon::set_allocated_points(std::string* points) {
  if (points != nullptr) {
    
  } else {
    
  }
  points_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), points);
  // @@protoc_insertion_point(field_set_allocated:cura.proto.Polygon.points)
}

// float line_width = 3;
inline void Polygon::clear_line_width() {
  line_width_ = 0;
}
inline float Polygon::_internal_line_width() const {
  return line_width_;
}
inline float Polygon::line_width() const {
  // @@protoc_insertion_point(field_get:cura.proto.Polygon.line_width)
  return _internal_line_width();
}
inline void Polygon::_internal_set_line_width(float value) {
  
  line_width_ = value;
}
inline void Polygon::set_line_width(float value) {
  _internal_set_line_width(value);
  // @@protoc_insertion_point(field_set:cura.proto.Polygon.line_width)
}

// float line_thickness = 4;
inline void Polygon::clear_line_thickness() {
  line_thickness_ = 0;
}
inline float Polygon::_internal_line_thickness() const {
  return line_thickness_;
}
inline float Polygon::line_thickness() const {
  // @@protoc_insertion_point(field_get:cura.proto.Polygon.line_thickness)
  return _internal_line_thickness();
}
inline void Polygon::_internal_set_line_thickness(float value) {
  
  line_thickness_ = value;
}
inline void Polygon::set_line_thickness(float value) {
  _internal_set_line_thickness(value);
  // @@protoc_insertion_point(field_set:cura.proto.Polygon.line_thickness)
}

// float line_feedrate = 5;
inline void Polygon::clear_line_feedrate() {
  line_feedrate_ = 0;
}
inline float Polygon::_internal_line_feedrate() const {
  return line_feedrate_;
}
inline float Polygon::line_feedrate() const {
  // @@protoc_insertion_point(field_get:cura.proto.Polygon.line_feedrate)
  return _internal_line_feedrate();
}
inline void Polygon::_internal_set_line_feedrate(float value) {
  
  line_feedrate_ = value;
}
inline void Polygon::set_line_feedrate(float value) {
  _internal_set_line_feedrate(value);
  // @@protoc_insertion_point(field_set:cura.proto.Polygon.line_feedrate)
}

// -------------------------------------------------------------------

// LayerOptimized

// int32 id = 1;
inline void LayerOptimized::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LayerOptimized::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LayerOptimized::id() const {
  // @@protoc_insertion_point(field_get:cura.proto.LayerOptimized.id)
  return _internal_id();
}
inline void LayerOptimized::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void LayerOptimized::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:cura.proto.LayerOptimized.id)
}

// float height = 2;
inline void LayerOptimized::clear_height() {
  height_ = 0;
}
inline float LayerOptimized::_internal_height() const {
  return height_;
}
inline float LayerOptimized::height() const {
  // @@protoc_insertion_point(field_get:cura.proto.LayerOptimized.height)
  return _internal_height();
}
inline void LayerOptimized::_internal_set_height(float value) {
  
  height_ = value;
}
inline void LayerOptimized::set_height(float value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:cura.proto.LayerOptimized.height)
}

// float thickness = 3;
inline void LayerOptimized::clear_thickness() {
  thickness_ = 0;
}
inline float LayerOptimized::_internal_thickness() const {
  return thickness_;
}
inline float LayerOptimized::thickness() const {
  // @@protoc_insertion_point(field_get:cura.proto.LayerOptimized.thickness)
  return _internal_thickness();
}
inline void LayerOptimized::_internal_set_thickness(float value) {
  
  thickness_ = value;
}
inline void LayerOptimized::set_thickness(float value) {
  _internal_set_thickness(value);
  // @@protoc_insertion_point(field_set:cura.proto.LayerOptimized.thickness)
}

// repeated .cura.proto.PathSegment path_segment = 4;
inline int LayerOptimized::_internal_path_segment_size() const {
  return path_segment_.size();
}
inline int LayerOptimized::path_segment_size() const {
  return _internal_path_segment_size();
}
inline void LayerOptimized::clear_path_segment() {
  path_segment_.Clear();
}
inline ::cura::proto::PathSegment* LayerOptimized::mutable_path_segment(int index) {
  // @@protoc_insertion_point(field_mutable:cura.proto.LayerOptimized.path_segment)
  return path_segment_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cura::proto::PathSegment >*
LayerOptimized::mutable_path_segment() {
  // @@protoc_insertion_point(field_mutable_list:cura.proto.LayerOptimized.path_segment)
  return &path_segment_;
}
inline const ::cura::proto::PathSegment& LayerOptimized::_internal_path_segment(int index) const {
  return path_segment_.Get(index);
}
inline const ::cura::proto::PathSegment& LayerOptimized::path_segment(int index) const {
  // @@protoc_insertion_point(field_get:cura.proto.LayerOptimized.path_segment)
  return _internal_path_segment(index);
}
inline ::cura::proto::PathSegment* LayerOptimized::_internal_add_path_segment() {
  return path_segment_.Add();
}
inline ::cura::proto::PathSegment* LayerOptimized::add_path_segment() {
  // @@protoc_insertion_point(field_add:cura.proto.LayerOptimized.path_segment)
  return _internal_add_path_segment();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cura::proto::PathSegment >&
LayerOptimized::path_segment() const {
  // @@protoc_insertion_point(field_list:cura.proto.LayerOptimized.path_segment)
  return path_segment_;
}

// -------------------------------------------------------------------

// PathSegment

// int32 extruder = 1;
inline void PathSegment::clear_extruder() {
  extruder_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PathSegment::_internal_extruder() const {
  return extruder_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PathSegment::extruder() const {
  // @@protoc_insertion_point(field_get:cura.proto.PathSegment.extruder)
  return _internal_extruder();
}
inline void PathSegment::_internal_set_extruder(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  extruder_ = value;
}
inline void PathSegment::set_extruder(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_extruder(value);
  // @@protoc_insertion_point(field_set:cura.proto.PathSegment.extruder)
}

// .cura.proto.PathSegment.PointType point_type = 2;
inline void PathSegment::clear_point_type() {
  point_type_ = 0;
}
inline ::cura::proto::PathSegment_PointType PathSegment::_internal_point_type() const {
  return static_cast< ::cura::proto::PathSegment_PointType >(point_type_);
}
inline ::cura::proto::PathSegment_PointType PathSegment::point_type() const {
  // @@protoc_insertion_point(field_get:cura.proto.PathSegment.point_type)
  return _internal_point_type();
}
inline void PathSegment::_internal_set_point_type(::cura::proto::PathSegment_PointType value) {
  
  point_type_ = value;
}
inline void PathSegment::set_point_type(::cura::proto::PathSegment_PointType value) {
  _internal_set_point_type(value);
  // @@protoc_insertion_point(field_set:cura.proto.PathSegment.point_type)
}

// bytes points = 3;
inline void PathSegment::clear_points() {
  points_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PathSegment::points() const {
  // @@protoc_insertion_point(field_get:cura.proto.PathSegment.points)
  return _internal_points();
}
inline void PathSegment::set_points(const std::string& value) {
  _internal_set_points(value);
  // @@protoc_insertion_point(field_set:cura.proto.PathSegment.points)
}
inline std::string* PathSegment::mutable_points() {
  // @@protoc_insertion_point(field_mutable:cura.proto.PathSegment.points)
  return _internal_mutable_points();
}
inline const std::string& PathSegment::_internal_points() const {
  return points_.GetNoArena();
}
inline void PathSegment::_internal_set_points(const std::string& value) {
  
  points_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PathSegment::set_points(std::string&& value) {
  
  points_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cura.proto.PathSegment.points)
}
inline void PathSegment::set_points(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  points_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cura.proto.PathSegment.points)
}
inline void PathSegment::set_points(const void* value, size_t size) {
  
  points_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cura.proto.PathSegment.points)
}
inline std::string* PathSegment::_internal_mutable_points() {
  
  return points_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PathSegment::release_points() {
  // @@protoc_insertion_point(field_release:cura.proto.PathSegment.points)
  
  return points_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PathSegment::set_allocated_points(std::string* points) {
  if (points != nullptr) {
    
  } else {
    
  }
  points_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), points);
  // @@protoc_insertion_point(field_set_allocated:cura.proto.PathSegment.points)
}

// bytes line_type = 4;
inline void PathSegment::clear_line_type() {
  line_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PathSegment::line_type() const {
  // @@protoc_insertion_point(field_get:cura.proto.PathSegment.line_type)
  return _internal_line_type();
}
inline void PathSegment::set_line_type(const std::string& value) {
  _internal_set_line_type(value);
  // @@protoc_insertion_point(field_set:cura.proto.PathSegment.line_type)
}
inline std::string* PathSegment::mutable_line_type() {
  // @@protoc_insertion_point(field_mutable:cura.proto.PathSegment.line_type)
  return _internal_mutable_line_type();
}
inline const std::string& PathSegment::_internal_line_type() const {
  return line_type_.GetNoArena();
}
inline void PathSegment::_internal_set_line_type(const std::string& value) {
  
  line_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PathSegment::set_line_type(std::string&& value) {
  
  line_type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cura.proto.PathSegment.line_type)
}
inline void PathSegment::set_line_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  line_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cura.proto.PathSegment.line_type)
}
inline void PathSegment::set_line_type(const void* value, size_t size) {
  
  line_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cura.proto.PathSegment.line_type)
}
inline std::string* PathSegment::_internal_mutable_line_type() {
  
  return line_type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PathSegment::release_line_type() {
  // @@protoc_insertion_point(field_release:cura.proto.PathSegment.line_type)
  
  return line_type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PathSegment::set_allocated_line_type(std::string* line_type) {
  if (line_type != nullptr) {
    
  } else {
    
  }
  line_type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), line_type);
  // @@protoc_insertion_point(field_set_allocated:cura.proto.PathSegment.line_type)
}

// bytes line_width = 5;
inline void PathSegment::clear_line_width() {
  line_width_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PathSegment::line_width() const {
  // @@protoc_insertion_point(field_get:cura.proto.PathSegment.line_width)
  return _internal_line_width();
}
inline void PathSegment::set_line_width(const std::string& value) {
  _internal_set_line_width(value);
  // @@protoc_insertion_point(field_set:cura.proto.PathSegment.line_width)
}
inline std::string* PathSegment::mutable_line_width() {
  // @@protoc_insertion_point(field_mutable:cura.proto.PathSegment.line_width)
  return _internal_mutable_line_width();
}
inline const std::string& PathSegment::_internal_line_width() const {
  return line_width_.GetNoArena();
}
inline void PathSegment::_internal_set_line_width(const std::string& value) {
  
  line_width_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PathSegment::set_line_width(std::string&& value) {
  
  line_width_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cura.proto.PathSegment.line_width)
}
inline void PathSegment::set_line_width(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  line_width_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cura.proto.PathSegment.line_width)
}
inline void PathSegment::set_line_width(const void* value, size_t size) {
  
  line_width_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cura.proto.PathSegment.line_width)
}
inline std::string* PathSegment::_internal_mutable_line_width() {
  
  return line_width_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PathSegment::release_line_width() {
  // @@protoc_insertion_point(field_release:cura.proto.PathSegment.line_width)
  
  return line_width_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PathSegment::set_allocated_line_width(std::string* line_width) {
  if (line_width != nullptr) {
    
  } else {
    
  }
  line_width_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), line_width);
  // @@protoc_insertion_point(field_set_allocated:cura.proto.PathSegment.line_width)
}

// bytes line_thickness = 6;
inline void PathSegment::clear_line_thickness() {
  line_thickness_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PathSegment::line_thickness() const {
  // @@protoc_insertion_point(field_get:cura.proto.PathSegment.line_thickness)
  return _internal_line_thickness();
}
inline void PathSegment::set_line_thickness(const std::string& value) {
  _internal_set_line_thickness(value);
  // @@protoc_insertion_point(field_set:cura.proto.PathSegment.line_thickness)
}
inline std::string* PathSegment::mutable_line_thickness() {
  // @@protoc_insertion_point(field_mutable:cura.proto.PathSegment.line_thickness)
  return _internal_mutable_line_thickness();
}
inline const std::string& PathSegment::_internal_line_thickness() const {
  return line_thickness_.GetNoArena();
}
inline void PathSegment::_internal_set_line_thickness(const std::string& value) {
  
  line_thickness_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PathSegment::set_line_thickness(std::string&& value) {
  
  line_thickness_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cura.proto.PathSegment.line_thickness)
}
inline void PathSegment::set_line_thickness(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  line_thickness_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cura.proto.PathSegment.line_thickness)
}
inline void PathSegment::set_line_thickness(const void* value, size_t size) {
  
  line_thickness_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cura.proto.PathSegment.line_thickness)
}
inline std::string* PathSegment::_internal_mutable_line_thickness() {
  
  return line_thickness_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PathSegment::release_line_thickness() {
  // @@protoc_insertion_point(field_release:cura.proto.PathSegment.line_thickness)
  
  return line_thickness_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PathSegment::set_allocated_line_thickness(std::string* line_thickness) {
  if (line_thickness != nullptr) {
    
  } else {
    
  }
  line_thickness_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), line_thickness);
  // @@protoc_insertion_point(field_set_allocated:cura.proto.PathSegment.line_thickness)
}

// bytes line_feedrate = 7;
inline void PathSegment::clear_line_feedrate() {
  line_feedrate_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PathSegment::line_feedrate() const {
  // @@protoc_insertion_point(field_get:cura.proto.PathSegment.line_feedrate)
  return _internal_line_feedrate();
}
inline void PathSegment::set_line_feedrate(const std::string& value) {
  _internal_set_line_feedrate(value);
  // @@protoc_insertion_point(field_set:cura.proto.PathSegment.line_feedrate)
}
inline std::string* PathSegment::mutable_line_feedrate() {
  // @@protoc_insertion_point(field_mutable:cura.proto.PathSegment.line_feedrate)
  return _internal_mutable_line_feedrate();
}
inline const std::string& PathSegment::_internal_line_feedrate() const {
  return line_feedrate_.GetNoArena();
}
inline void PathSegment::_internal_set_line_feedrate(const std::string& value) {
  
  line_feedrate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PathSegment::set_line_feedrate(std::string&& value) {
  
  line_feedrate_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cura.proto.PathSegment.line_feedrate)
}
inline void PathSegment::set_line_feedrate(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  line_feedrate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cura.proto.PathSegment.line_feedrate)
}
inline void PathSegment::set_line_feedrate(const void* value, size_t size) {
  
  line_feedrate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cura.proto.PathSegment.line_feedrate)
}
inline std::string* PathSegment::_internal_mutable_line_feedrate() {
  
  return line_feedrate_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PathSegment::release_line_feedrate() {
  // @@protoc_insertion_point(field_release:cura.proto.PathSegment.line_feedrate)
  
  return line_feedrate_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PathSegment::set_allocated_line_feedrate(std::string* line_feedrate) {
  if (line_feedrate != nullptr) {
    
  } else {
    
  }
  line_feedrate_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), line_feedrate);
  // @@protoc_insertion_point(field_set_allocated:cura.proto.PathSegment.line_feedrate)
}

// -------------------------------------------------------------------

// GCodeLayer

// bytes data = 2;
inline void GCodeLayer::clear_data() {
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GCodeLayer::data() const {
  // @@protoc_insertion_point(field_get:cura.proto.GCodeLayer.data)
  return _internal_data();
}
inline void GCodeLayer::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:cura.proto.GCodeLayer.data)
}
inline std::string* GCodeLayer::mutable_data() {
  // @@protoc_insertion_point(field_mutable:cura.proto.GCodeLayer.data)
  return _internal_mutable_data();
}
inline const std::string& GCodeLayer::_internal_data() const {
  return data_.GetNoArena();
}
inline void GCodeLayer::_internal_set_data(const std::string& value) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GCodeLayer::set_data(std::string&& value) {
  
  data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cura.proto.GCodeLayer.data)
}
inline void GCodeLayer::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cura.proto.GCodeLayer.data)
}
inline void GCodeLayer::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cura.proto.GCodeLayer.data)
}
inline std::string* GCodeLayer::_internal_mutable_data() {
  
  return data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GCodeLayer::release_data() {
  // @@protoc_insertion_point(field_release:cura.proto.GCodeLayer.data)
  
  return data_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GCodeLayer::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:cura.proto.GCodeLayer.data)
}

// -------------------------------------------------------------------

// PrintTimeMaterialEstimates

// float time_none = 1;
inline void PrintTimeMaterialEstimates::clear_time_none() {
  time_none_ = 0;
}
inline float PrintTimeMaterialEstimates::_internal_time_none() const {
  return time_none_;
}
inline float PrintTimeMaterialEstimates::time_none() const {
  // @@protoc_insertion_point(field_get:cura.proto.PrintTimeMaterialEstimates.time_none)
  return _internal_time_none();
}
inline void PrintTimeMaterialEstimates::_internal_set_time_none(float value) {
  
  time_none_ = value;
}
inline void PrintTimeMaterialEstimates::set_time_none(float value) {
  _internal_set_time_none(value);
  // @@protoc_insertion_point(field_set:cura.proto.PrintTimeMaterialEstimates.time_none)
}

// float time_inset_0 = 2;
inline void PrintTimeMaterialEstimates::clear_time_inset_0() {
  time_inset_0_ = 0;
}
inline float PrintTimeMaterialEstimates::_internal_time_inset_0() const {
  return time_inset_0_;
}
inline float PrintTimeMaterialEstimates::time_inset_0() const {
  // @@protoc_insertion_point(field_get:cura.proto.PrintTimeMaterialEstimates.time_inset_0)
  return _internal_time_inset_0();
}
inline void PrintTimeMaterialEstimates::_internal_set_time_inset_0(float value) {
  
  time_inset_0_ = value;
}
inline void PrintTimeMaterialEstimates::set_time_inset_0(float value) {
  _internal_set_time_inset_0(value);
  // @@protoc_insertion_point(field_set:cura.proto.PrintTimeMaterialEstimates.time_inset_0)
}

// float time_inset_x = 3;
inline void PrintTimeMaterialEstimates::clear_time_inset_x() {
  time_inset_x_ = 0;
}
inline float PrintTimeMaterialEstimates::_internal_time_inset_x() const {
  return time_inset_x_;
}
inline float PrintTimeMaterialEstimates::time_inset_x() const {
  // @@protoc_insertion_point(field_get:cura.proto.PrintTimeMaterialEstimates.time_inset_x)
  return _internal_time_inset_x();
}
inline void PrintTimeMaterialEstimates::_internal_set_time_inset_x(float value) {
  
  time_inset_x_ = value;
}
inline void PrintTimeMaterialEstimates::set_time_inset_x(float value) {
  _internal_set_time_inset_x(value);
  // @@protoc_insertion_point(field_set:cura.proto.PrintTimeMaterialEstimates.time_inset_x)
}

// float time_skin = 4;
inline void PrintTimeMaterialEstimates::clear_time_skin() {
  time_skin_ = 0;
}
inline float PrintTimeMaterialEstimates::_internal_time_skin() const {
  return time_skin_;
}
inline float PrintTimeMaterialEstimates::time_skin() const {
  // @@protoc_insertion_point(field_get:cura.proto.PrintTimeMaterialEstimates.time_skin)
  return _internal_time_skin();
}
inline void PrintTimeMaterialEstimates::_internal_set_time_skin(float value) {
  
  time_skin_ = value;
}
inline void PrintTimeMaterialEstimates::set_time_skin(float value) {
  _internal_set_time_skin(value);
  // @@protoc_insertion_point(field_set:cura.proto.PrintTimeMaterialEstimates.time_skin)
}

// float time_support = 5;
inline void PrintTimeMaterialEstimates::clear_time_support() {
  time_support_ = 0;
}
inline float PrintTimeMaterialEstimates::_internal_time_support() const {
  return time_support_;
}
inline float PrintTimeMaterialEstimates::time_support() const {
  // @@protoc_insertion_point(field_get:cura.proto.PrintTimeMaterialEstimates.time_support)
  return _internal_time_support();
}
inline void PrintTimeMaterialEstimates::_internal_set_time_support(float value) {
  
  time_support_ = value;
}
inline void PrintTimeMaterialEstimates::set_time_support(float value) {
  _internal_set_time_support(value);
  // @@protoc_insertion_point(field_set:cura.proto.PrintTimeMaterialEstimates.time_support)
}

// float time_skirt = 6;
inline void PrintTimeMaterialEstimates::clear_time_skirt() {
  time_skirt_ = 0;
}
inline float PrintTimeMaterialEstimates::_internal_time_skirt() const {
  return time_skirt_;
}
inline float PrintTimeMaterialEstimates::time_skirt() const {
  // @@protoc_insertion_point(field_get:cura.proto.PrintTimeMaterialEstimates.time_skirt)
  return _internal_time_skirt();
}
inline void PrintTimeMaterialEstimates::_internal_set_time_skirt(float value) {
  
  time_skirt_ = value;
}
inline void PrintTimeMaterialEstimates::set_time_skirt(float value) {
  _internal_set_time_skirt(value);
  // @@protoc_insertion_point(field_set:cura.proto.PrintTimeMaterialEstimates.time_skirt)
}

// float time_infill = 7;
inline void PrintTimeMaterialEstimates::clear_time_infill() {
  time_infill_ = 0;
}
inline float PrintTimeMaterialEstimates::_internal_time_infill() const {
  return time_infill_;
}
inline float PrintTimeMaterialEstimates::time_infill() const {
  // @@protoc_insertion_point(field_get:cura.proto.PrintTimeMaterialEstimates.time_infill)
  return _internal_time_infill();
}
inline void PrintTimeMaterialEstimates::_internal_set_time_infill(float value) {
  
  time_infill_ = value;
}
inline void PrintTimeMaterialEstimates::set_time_infill(float value) {
  _internal_set_time_infill(value);
  // @@protoc_insertion_point(field_set:cura.proto.PrintTimeMaterialEstimates.time_infill)
}

// float time_support_infill = 8;
inline void PrintTimeMaterialEstimates::clear_time_support_infill() {
  time_support_infill_ = 0;
}
inline float PrintTimeMaterialEstimates::_internal_time_support_infill() const {
  return time_support_infill_;
}
inline float PrintTimeMaterialEstimates::time_support_infill() const {
  // @@protoc_insertion_point(field_get:cura.proto.PrintTimeMaterialEstimates.time_support_infill)
  return _internal_time_support_infill();
}
inline void PrintTimeMaterialEstimates::_internal_set_time_support_infill(float value) {
  
  time_support_infill_ = value;
}
inline void PrintTimeMaterialEstimates::set_time_support_infill(float value) {
  _internal_set_time_support_infill(value);
  // @@protoc_insertion_point(field_set:cura.proto.PrintTimeMaterialEstimates.time_support_infill)
}

// float time_travel = 9;
inline void PrintTimeMaterialEstimates::clear_time_travel() {
  time_travel_ = 0;
}
inline float PrintTimeMaterialEstimates::_internal_time_travel() const {
  return time_travel_;
}
inline float PrintTimeMaterialEstimates::time_travel() const {
  // @@protoc_insertion_point(field_get:cura.proto.PrintTimeMaterialEstimates.time_travel)
  return _internal_time_travel();
}
inline void PrintTimeMaterialEstimates::_internal_set_time_travel(float value) {
  
  time_travel_ = value;
}
inline void PrintTimeMaterialEstimates::set_time_travel(float value) {
  _internal_set_time_travel(value);
  // @@protoc_insertion_point(field_set:cura.proto.PrintTimeMaterialEstimates.time_travel)
}

// float time_retract = 10;
inline void PrintTimeMaterialEstimates::clear_time_retract() {
  time_retract_ = 0;
}
inline float PrintTimeMaterialEstimates::_internal_time_retract() const {
  return time_retract_;
}
inline float PrintTimeMaterialEstimates::time_retract() const {
  // @@protoc_insertion_point(field_get:cura.proto.PrintTimeMaterialEstimates.time_retract)
  return _internal_time_retract();
}
inline void PrintTimeMaterialEstimates::_internal_set_time_retract(float value) {
  
  time_retract_ = value;
}
inline void PrintTimeMaterialEstimates::set_time_retract(float value) {
  _internal_set_time_retract(value);
  // @@protoc_insertion_point(field_set:cura.proto.PrintTimeMaterialEstimates.time_retract)
}

// float time_support_interface = 11;
inline void PrintTimeMaterialEstimates::clear_time_support_interface() {
  time_support_interface_ = 0;
}
inline float PrintTimeMaterialEstimates::_internal_time_support_interface() const {
  return time_support_interface_;
}
inline float PrintTimeMaterialEstimates::time_support_interface() const {
  // @@protoc_insertion_point(field_get:cura.proto.PrintTimeMaterialEstimates.time_support_interface)
  return _internal_time_support_interface();
}
inline void PrintTimeMaterialEstimates::_internal_set_time_support_interface(float value) {
  
  time_support_interface_ = value;
}
inline void PrintTimeMaterialEstimates::set_time_support_interface(float value) {
  _internal_set_time_support_interface(value);
  // @@protoc_insertion_point(field_set:cura.proto.PrintTimeMaterialEstimates.time_support_interface)
}

// float time_prime_tower = 12;
inline void PrintTimeMaterialEstimates::clear_time_prime_tower() {
  time_prime_tower_ = 0;
}
inline float PrintTimeMaterialEstimates::_internal_time_prime_tower() const {
  return time_prime_tower_;
}
inline float PrintTimeMaterialEstimates::time_prime_tower() const {
  // @@protoc_insertion_point(field_get:cura.proto.PrintTimeMaterialEstimates.time_prime_tower)
  return _internal_time_prime_tower();
}
inline void PrintTimeMaterialEstimates::_internal_set_time_prime_tower(float value) {
  
  time_prime_tower_ = value;
}
inline void PrintTimeMaterialEstimates::set_time_prime_tower(float value) {
  _internal_set_time_prime_tower(value);
  // @@protoc_insertion_point(field_set:cura.proto.PrintTimeMaterialEstimates.time_prime_tower)
}

// repeated .cura.proto.MaterialEstimates materialEstimates = 13;
inline int PrintTimeMaterialEstimates::_internal_materialestimates_size() const {
  return materialestimates_.size();
}
inline int PrintTimeMaterialEstimates::materialestimates_size() const {
  return _internal_materialestimates_size();
}
inline void PrintTimeMaterialEstimates::clear_materialestimates() {
  materialestimates_.Clear();
}
inline ::cura::proto::MaterialEstimates* PrintTimeMaterialEstimates::mutable_materialestimates(int index) {
  // @@protoc_insertion_point(field_mutable:cura.proto.PrintTimeMaterialEstimates.materialEstimates)
  return materialestimates_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cura::proto::MaterialEstimates >*
PrintTimeMaterialEstimates::mutable_materialestimates() {
  // @@protoc_insertion_point(field_mutable_list:cura.proto.PrintTimeMaterialEstimates.materialEstimates)
  return &materialestimates_;
}
inline const ::cura::proto::MaterialEstimates& PrintTimeMaterialEstimates::_internal_materialestimates(int index) const {
  return materialestimates_.Get(index);
}
inline const ::cura::proto::MaterialEstimates& PrintTimeMaterialEstimates::materialestimates(int index) const {
  // @@protoc_insertion_point(field_get:cura.proto.PrintTimeMaterialEstimates.materialEstimates)
  return _internal_materialestimates(index);
}
inline ::cura::proto::MaterialEstimates* PrintTimeMaterialEstimates::_internal_add_materialestimates() {
  return materialestimates_.Add();
}
inline ::cura::proto::MaterialEstimates* PrintTimeMaterialEstimates::add_materialestimates() {
  // @@protoc_insertion_point(field_add:cura.proto.PrintTimeMaterialEstimates.materialEstimates)
  return _internal_add_materialestimates();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cura::proto::MaterialEstimates >&
PrintTimeMaterialEstimates::materialestimates() const {
  // @@protoc_insertion_point(field_list:cura.proto.PrintTimeMaterialEstimates.materialEstimates)
  return materialestimates_;
}

// -------------------------------------------------------------------

// MaterialEstimates

// int64 id = 1;
inline void MaterialEstimates::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MaterialEstimates::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MaterialEstimates::id() const {
  // @@protoc_insertion_point(field_get:cura.proto.MaterialEstimates.id)
  return _internal_id();
}
inline void MaterialEstimates::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void MaterialEstimates::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:cura.proto.MaterialEstimates.id)
}

// float material_amount = 2;
inline void MaterialEstimates::clear_material_amount() {
  material_amount_ = 0;
}
inline float MaterialEstimates::_internal_material_amount() const {
  return material_amount_;
}
inline float MaterialEstimates::material_amount() const {
  // @@protoc_insertion_point(field_get:cura.proto.MaterialEstimates.material_amount)
  return _internal_material_amount();
}
inline void MaterialEstimates::_internal_set_material_amount(float value) {
  
  material_amount_ = value;
}
inline void MaterialEstimates::set_material_amount(float value) {
  _internal_set_material_amount(value);
  // @@protoc_insertion_point(field_set:cura.proto.MaterialEstimates.material_amount)
}

// -------------------------------------------------------------------

// SettingList

// repeated .cura.proto.Setting settings = 1;
inline int SettingList::_internal_settings_size() const {
  return settings_.size();
}
inline int SettingList::settings_size() const {
  return _internal_settings_size();
}
inline void SettingList::clear_settings() {
  settings_.Clear();
}
inline ::cura::proto::Setting* SettingList::mutable_settings(int index) {
  // @@protoc_insertion_point(field_mutable:cura.proto.SettingList.settings)
  return settings_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cura::proto::Setting >*
SettingList::mutable_settings() {
  // @@protoc_insertion_point(field_mutable_list:cura.proto.SettingList.settings)
  return &settings_;
}
inline const ::cura::proto::Setting& SettingList::_internal_settings(int index) const {
  return settings_.Get(index);
}
inline const ::cura::proto::Setting& SettingList::settings(int index) const {
  // @@protoc_insertion_point(field_get:cura.proto.SettingList.settings)
  return _internal_settings(index);
}
inline ::cura::proto::Setting* SettingList::_internal_add_settings() {
  return settings_.Add();
}
inline ::cura::proto::Setting* SettingList::add_settings() {
  // @@protoc_insertion_point(field_add:cura.proto.SettingList.settings)
  return _internal_add_settings();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cura::proto::Setting >&
SettingList::settings() const {
  // @@protoc_insertion_point(field_list:cura.proto.SettingList.settings)
  return settings_;
}

// -------------------------------------------------------------------

// Setting

// string name = 1;
inline void Setting::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Setting::name() const {
  // @@protoc_insertion_point(field_get:cura.proto.Setting.name)
  return _internal_name();
}
inline void Setting::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:cura.proto.Setting.name)
}
inline std::string* Setting::mutable_name() {
  // @@protoc_insertion_point(field_mutable:cura.proto.Setting.name)
  return _internal_mutable_name();
}
inline const std::string& Setting::_internal_name() const {
  return name_.GetNoArena();
}
inline void Setting::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Setting::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cura.proto.Setting.name)
}
inline void Setting::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cura.proto.Setting.name)
}
inline void Setting::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cura.proto.Setting.name)
}
inline std::string* Setting::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Setting::release_name() {
  // @@protoc_insertion_point(field_release:cura.proto.Setting.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Setting::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:cura.proto.Setting.name)
}

// bytes value = 2;
inline void Setting::clear_value() {
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Setting::value() const {
  // @@protoc_insertion_point(field_get:cura.proto.Setting.value)
  return _internal_value();
}
inline void Setting::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:cura.proto.Setting.value)
}
inline std::string* Setting::mutable_value() {
  // @@protoc_insertion_point(field_mutable:cura.proto.Setting.value)
  return _internal_mutable_value();
}
inline const std::string& Setting::_internal_value() const {
  return value_.GetNoArena();
}
inline void Setting::_internal_set_value(const std::string& value) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Setting::set_value(std::string&& value) {
  
  value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cura.proto.Setting.value)
}
inline void Setting::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cura.proto.Setting.value)
}
inline void Setting::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cura.proto.Setting.value)
}
inline std::string* Setting::_internal_mutable_value() {
  
  return value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Setting::release_value() {
  // @@protoc_insertion_point(field_release:cura.proto.Setting.value)
  
  return value_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Setting::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:cura.proto.Setting.value)
}

// -------------------------------------------------------------------

// SettingExtruder

// string name = 1;
inline void SettingExtruder::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SettingExtruder::name() const {
  // @@protoc_insertion_point(field_get:cura.proto.SettingExtruder.name)
  return _internal_name();
}
inline void SettingExtruder::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:cura.proto.SettingExtruder.name)
}
inline std::string* SettingExtruder::mutable_name() {
  // @@protoc_insertion_point(field_mutable:cura.proto.SettingExtruder.name)
  return _internal_mutable_name();
}
inline const std::string& SettingExtruder::_internal_name() const {
  return name_.GetNoArena();
}
inline void SettingExtruder::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SettingExtruder::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cura.proto.SettingExtruder.name)
}
inline void SettingExtruder::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cura.proto.SettingExtruder.name)
}
inline void SettingExtruder::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cura.proto.SettingExtruder.name)
}
inline std::string* SettingExtruder::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SettingExtruder::release_name() {
  // @@protoc_insertion_point(field_release:cura.proto.SettingExtruder.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SettingExtruder::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:cura.proto.SettingExtruder.name)
}

// int32 extruder = 2;
inline void SettingExtruder::clear_extruder() {
  extruder_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SettingExtruder::_internal_extruder() const {
  return extruder_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SettingExtruder::extruder() const {
  // @@protoc_insertion_point(field_get:cura.proto.SettingExtruder.extruder)
  return _internal_extruder();
}
inline void SettingExtruder::_internal_set_extruder(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  extruder_ = value;
}
inline void SettingExtruder::set_extruder(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_extruder(value);
  // @@protoc_insertion_point(field_set:cura.proto.SettingExtruder.extruder)
}

// -------------------------------------------------------------------

// GCodePrefix

// bytes data = 2;
inline void GCodePrefix::clear_data() {
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GCodePrefix::data() const {
  // @@protoc_insertion_point(field_get:cura.proto.GCodePrefix.data)
  return _internal_data();
}
inline void GCodePrefix::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:cura.proto.GCodePrefix.data)
}
inline std::string* GCodePrefix::mutable_data() {
  // @@protoc_insertion_point(field_mutable:cura.proto.GCodePrefix.data)
  return _internal_mutable_data();
}
inline const std::string& GCodePrefix::_internal_data() const {
  return data_.GetNoArena();
}
inline void GCodePrefix::_internal_set_data(const std::string& value) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GCodePrefix::set_data(std::string&& value) {
  
  data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cura.proto.GCodePrefix.data)
}
inline void GCodePrefix::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cura.proto.GCodePrefix.data)
}
inline void GCodePrefix::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cura.proto.GCodePrefix.data)
}
inline std::string* GCodePrefix::_internal_mutable_data() {
  
  return data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GCodePrefix::release_data() {
  // @@protoc_insertion_point(field_release:cura.proto.GCodePrefix.data)
  
  return data_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GCodePrefix::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:cura.proto.GCodePrefix.data)
}

// -------------------------------------------------------------------

// SlicingFinished

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace cura

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::cura::proto::Polygon_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cura::proto::Polygon_Type>() {
  return ::cura::proto::Polygon_Type_descriptor();
}
template <> struct is_proto_enum< ::cura::proto::PathSegment_PointType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cura::proto::PathSegment_PointType>() {
  return ::cura::proto::PathSegment_PointType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Cura_2eproto
