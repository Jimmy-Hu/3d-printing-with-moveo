// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Cura.proto

#include "Cura.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_Cura_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Extruder_Cura_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Cura_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MaterialEstimates_Cura_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Cura_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Object_Cura_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Cura_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ObjectList_Cura_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Cura_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PathSegment_Cura_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Cura_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Polygon_Cura_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Cura_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Setting_Cura_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Cura_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SettingExtruder_Cura_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Cura_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SettingList_Cura_2eproto;
namespace cura {
namespace proto {
class ObjectListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObjectList> _instance;
} _ObjectList_default_instance_;
class SliceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Slice> _instance;
} _Slice_default_instance_;
class ExtruderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Extruder> _instance;
} _Extruder_default_instance_;
class ObjectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Object> _instance;
} _Object_default_instance_;
class ProgressDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Progress> _instance;
} _Progress_default_instance_;
class LayerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Layer> _instance;
} _Layer_default_instance_;
class PolygonDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Polygon> _instance;
} _Polygon_default_instance_;
class LayerOptimizedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LayerOptimized> _instance;
} _LayerOptimized_default_instance_;
class PathSegmentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PathSegment> _instance;
} _PathSegment_default_instance_;
class GCodeLayerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GCodeLayer> _instance;
} _GCodeLayer_default_instance_;
class PrintTimeMaterialEstimatesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PrintTimeMaterialEstimates> _instance;
} _PrintTimeMaterialEstimates_default_instance_;
class MaterialEstimatesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MaterialEstimates> _instance;
} _MaterialEstimates_default_instance_;
class SettingListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SettingList> _instance;
} _SettingList_default_instance_;
class SettingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Setting> _instance;
} _Setting_default_instance_;
class SettingExtruderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SettingExtruder> _instance;
} _SettingExtruder_default_instance_;
class GCodePrefixDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GCodePrefix> _instance;
} _GCodePrefix_default_instance_;
class SlicingFinishedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SlicingFinished> _instance;
} _SlicingFinished_default_instance_;
}  // namespace proto
}  // namespace cura
static void InitDefaultsscc_info_Extruder_Cura_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cura::proto::_Extruder_default_instance_;
    new (ptr) ::cura::proto::Extruder();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cura::proto::Extruder::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Extruder_Cura_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Extruder_Cura_2eproto}, {
      &scc_info_SettingList_Cura_2eproto.base,}};

static void InitDefaultsscc_info_GCodeLayer_Cura_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cura::proto::_GCodeLayer_default_instance_;
    new (ptr) ::cura::proto::GCodeLayer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cura::proto::GCodeLayer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GCodeLayer_Cura_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GCodeLayer_Cura_2eproto}, {}};

static void InitDefaultsscc_info_GCodePrefix_Cura_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cura::proto::_GCodePrefix_default_instance_;
    new (ptr) ::cura::proto::GCodePrefix();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cura::proto::GCodePrefix::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GCodePrefix_Cura_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GCodePrefix_Cura_2eproto}, {}};

static void InitDefaultsscc_info_Layer_Cura_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cura::proto::_Layer_default_instance_;
    new (ptr) ::cura::proto::Layer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cura::proto::Layer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Layer_Cura_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Layer_Cura_2eproto}, {
      &scc_info_Polygon_Cura_2eproto.base,}};

static void InitDefaultsscc_info_LayerOptimized_Cura_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cura::proto::_LayerOptimized_default_instance_;
    new (ptr) ::cura::proto::LayerOptimized();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cura::proto::LayerOptimized::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LayerOptimized_Cura_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LayerOptimized_Cura_2eproto}, {
      &scc_info_PathSegment_Cura_2eproto.base,}};

static void InitDefaultsscc_info_MaterialEstimates_Cura_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cura::proto::_MaterialEstimates_default_instance_;
    new (ptr) ::cura::proto::MaterialEstimates();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cura::proto::MaterialEstimates::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MaterialEstimates_Cura_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MaterialEstimates_Cura_2eproto}, {}};

static void InitDefaultsscc_info_Object_Cura_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cura::proto::_Object_default_instance_;
    new (ptr) ::cura::proto::Object();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cura::proto::Object::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Object_Cura_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Object_Cura_2eproto}, {
      &scc_info_Setting_Cura_2eproto.base,}};

static void InitDefaultsscc_info_ObjectList_Cura_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cura::proto::_ObjectList_default_instance_;
    new (ptr) ::cura::proto::ObjectList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cura::proto::ObjectList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ObjectList_Cura_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ObjectList_Cura_2eproto}, {
      &scc_info_Object_Cura_2eproto.base,
      &scc_info_Setting_Cura_2eproto.base,}};

static void InitDefaultsscc_info_PathSegment_Cura_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cura::proto::_PathSegment_default_instance_;
    new (ptr) ::cura::proto::PathSegment();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cura::proto::PathSegment::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PathSegment_Cura_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PathSegment_Cura_2eproto}, {}};

static void InitDefaultsscc_info_Polygon_Cura_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cura::proto::_Polygon_default_instance_;
    new (ptr) ::cura::proto::Polygon();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cura::proto::Polygon::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Polygon_Cura_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Polygon_Cura_2eproto}, {}};

static void InitDefaultsscc_info_PrintTimeMaterialEstimates_Cura_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cura::proto::_PrintTimeMaterialEstimates_default_instance_;
    new (ptr) ::cura::proto::PrintTimeMaterialEstimates();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cura::proto::PrintTimeMaterialEstimates::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PrintTimeMaterialEstimates_Cura_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PrintTimeMaterialEstimates_Cura_2eproto}, {
      &scc_info_MaterialEstimates_Cura_2eproto.base,}};

static void InitDefaultsscc_info_Progress_Cura_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cura::proto::_Progress_default_instance_;
    new (ptr) ::cura::proto::Progress();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cura::proto::Progress::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Progress_Cura_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Progress_Cura_2eproto}, {}};

static void InitDefaultsscc_info_Setting_Cura_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cura::proto::_Setting_default_instance_;
    new (ptr) ::cura::proto::Setting();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cura::proto::Setting::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Setting_Cura_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Setting_Cura_2eproto}, {}};

static void InitDefaultsscc_info_SettingExtruder_Cura_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cura::proto::_SettingExtruder_default_instance_;
    new (ptr) ::cura::proto::SettingExtruder();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cura::proto::SettingExtruder::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SettingExtruder_Cura_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SettingExtruder_Cura_2eproto}, {}};

static void InitDefaultsscc_info_SettingList_Cura_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cura::proto::_SettingList_default_instance_;
    new (ptr) ::cura::proto::SettingList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cura::proto::SettingList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SettingList_Cura_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SettingList_Cura_2eproto}, {
      &scc_info_Setting_Cura_2eproto.base,}};

static void InitDefaultsscc_info_Slice_Cura_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cura::proto::_Slice_default_instance_;
    new (ptr) ::cura::proto::Slice();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cura::proto::Slice::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Slice_Cura_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_Slice_Cura_2eproto}, {
      &scc_info_ObjectList_Cura_2eproto.base,
      &scc_info_SettingList_Cura_2eproto.base,
      &scc_info_Extruder_Cura_2eproto.base,
      &scc_info_SettingExtruder_Cura_2eproto.base,}};

static void InitDefaultsscc_info_SlicingFinished_Cura_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cura::proto::_SlicingFinished_default_instance_;
    new (ptr) ::cura::proto::SlicingFinished();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cura::proto::SlicingFinished::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SlicingFinished_Cura_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SlicingFinished_Cura_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Cura_2eproto[17];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_Cura_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Cura_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Cura_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cura::proto::ObjectList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cura::proto::ObjectList, objects_),
  PROTOBUF_FIELD_OFFSET(::cura::proto::ObjectList, settings_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cura::proto::Slice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cura::proto::Slice, object_lists_),
  PROTOBUF_FIELD_OFFSET(::cura::proto::Slice, global_settings_),
  PROTOBUF_FIELD_OFFSET(::cura::proto::Slice, extruders_),
  PROTOBUF_FIELD_OFFSET(::cura::proto::Slice, limit_to_extruder_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cura::proto::Extruder, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cura::proto::Extruder, id_),
  PROTOBUF_FIELD_OFFSET(::cura::proto::Extruder, settings_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cura::proto::Object, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cura::proto::Object, id_),
  PROTOBUF_FIELD_OFFSET(::cura::proto::Object, vertices_),
  PROTOBUF_FIELD_OFFSET(::cura::proto::Object, normals_),
  PROTOBUF_FIELD_OFFSET(::cura::proto::Object, indices_),
  PROTOBUF_FIELD_OFFSET(::cura::proto::Object, settings_),
  PROTOBUF_FIELD_OFFSET(::cura::proto::Object, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cura::proto::Progress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cura::proto::Progress, amount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cura::proto::Layer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cura::proto::Layer, id_),
  PROTOBUF_FIELD_OFFSET(::cura::proto::Layer, height_),
  PROTOBUF_FIELD_OFFSET(::cura::proto::Layer, thickness_),
  PROTOBUF_FIELD_OFFSET(::cura::proto::Layer, polygons_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cura::proto::Polygon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cura::proto::Polygon, type_),
  PROTOBUF_FIELD_OFFSET(::cura::proto::Polygon, points_),
  PROTOBUF_FIELD_OFFSET(::cura::proto::Polygon, line_width_),
  PROTOBUF_FIELD_OFFSET(::cura::proto::Polygon, line_thickness_),
  PROTOBUF_FIELD_OFFSET(::cura::proto::Polygon, line_feedrate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cura::proto::LayerOptimized, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cura::proto::LayerOptimized, id_),
  PROTOBUF_FIELD_OFFSET(::cura::proto::LayerOptimized, height_),
  PROTOBUF_FIELD_OFFSET(::cura::proto::LayerOptimized, thickness_),
  PROTOBUF_FIELD_OFFSET(::cura::proto::LayerOptimized, path_segment_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cura::proto::PathSegment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cura::proto::PathSegment, extruder_),
  PROTOBUF_FIELD_OFFSET(::cura::proto::PathSegment, point_type_),
  PROTOBUF_FIELD_OFFSET(::cura::proto::PathSegment, points_),
  PROTOBUF_FIELD_OFFSET(::cura::proto::PathSegment, line_type_),
  PROTOBUF_FIELD_OFFSET(::cura::proto::PathSegment, line_width_),
  PROTOBUF_FIELD_OFFSET(::cura::proto::PathSegment, line_thickness_),
  PROTOBUF_FIELD_OFFSET(::cura::proto::PathSegment, line_feedrate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cura::proto::GCodeLayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cura::proto::GCodeLayer, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cura::proto::PrintTimeMaterialEstimates, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cura::proto::PrintTimeMaterialEstimates, time_none_),
  PROTOBUF_FIELD_OFFSET(::cura::proto::PrintTimeMaterialEstimates, time_inset_0_),
  PROTOBUF_FIELD_OFFSET(::cura::proto::PrintTimeMaterialEstimates, time_inset_x_),
  PROTOBUF_FIELD_OFFSET(::cura::proto::PrintTimeMaterialEstimates, time_skin_),
  PROTOBUF_FIELD_OFFSET(::cura::proto::PrintTimeMaterialEstimates, time_support_),
  PROTOBUF_FIELD_OFFSET(::cura::proto::PrintTimeMaterialEstimates, time_skirt_),
  PROTOBUF_FIELD_OFFSET(::cura::proto::PrintTimeMaterialEstimates, time_infill_),
  PROTOBUF_FIELD_OFFSET(::cura::proto::PrintTimeMaterialEstimates, time_support_infill_),
  PROTOBUF_FIELD_OFFSET(::cura::proto::PrintTimeMaterialEstimates, time_travel_),
  PROTOBUF_FIELD_OFFSET(::cura::proto::PrintTimeMaterialEstimates, time_retract_),
  PROTOBUF_FIELD_OFFSET(::cura::proto::PrintTimeMaterialEstimates, time_support_interface_),
  PROTOBUF_FIELD_OFFSET(::cura::proto::PrintTimeMaterialEstimates, time_prime_tower_),
  PROTOBUF_FIELD_OFFSET(::cura::proto::PrintTimeMaterialEstimates, materialestimates_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cura::proto::MaterialEstimates, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cura::proto::MaterialEstimates, id_),
  PROTOBUF_FIELD_OFFSET(::cura::proto::MaterialEstimates, material_amount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cura::proto::SettingList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cura::proto::SettingList, settings_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cura::proto::Setting, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cura::proto::Setting, name_),
  PROTOBUF_FIELD_OFFSET(::cura::proto::Setting, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cura::proto::SettingExtruder, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cura::proto::SettingExtruder, name_),
  PROTOBUF_FIELD_OFFSET(::cura::proto::SettingExtruder, extruder_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cura::proto::GCodePrefix, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cura::proto::GCodePrefix, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cura::proto::SlicingFinished, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::cura::proto::ObjectList)},
  { 7, -1, sizeof(::cura::proto::Slice)},
  { 16, -1, sizeof(::cura::proto::Extruder)},
  { 23, -1, sizeof(::cura::proto::Object)},
  { 34, -1, sizeof(::cura::proto::Progress)},
  { 40, -1, sizeof(::cura::proto::Layer)},
  { 49, -1, sizeof(::cura::proto::Polygon)},
  { 59, -1, sizeof(::cura::proto::LayerOptimized)},
  { 68, -1, sizeof(::cura::proto::PathSegment)},
  { 80, -1, sizeof(::cura::proto::GCodeLayer)},
  { 86, -1, sizeof(::cura::proto::PrintTimeMaterialEstimates)},
  { 104, -1, sizeof(::cura::proto::MaterialEstimates)},
  { 111, -1, sizeof(::cura::proto::SettingList)},
  { 117, -1, sizeof(::cura::proto::Setting)},
  { 124, -1, sizeof(::cura::proto::SettingExtruder)},
  { 131, -1, sizeof(::cura::proto::GCodePrefix)},
  { 137, -1, sizeof(::cura::proto::SlicingFinished)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cura::proto::_ObjectList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cura::proto::_Slice_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cura::proto::_Extruder_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cura::proto::_Object_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cura::proto::_Progress_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cura::proto::_Layer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cura::proto::_Polygon_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cura::proto::_LayerOptimized_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cura::proto::_PathSegment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cura::proto::_GCodeLayer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cura::proto::_PrintTimeMaterialEstimates_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cura::proto::_MaterialEstimates_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cura::proto::_SettingList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cura::proto::_Setting_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cura::proto::_SettingExtruder_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cura::proto::_GCodePrefix_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cura::proto::_SlicingFinished_default_instance_),
};

const char descriptor_table_protodef_Cura_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nCura.proto\022\ncura.proto\"X\n\nObjectList\022#"
  "\n\007objects\030\001 \003(\0132\022.cura.proto.Object\022%\n\010s"
  "ettings\030\002 \003(\0132\023.cura.proto.Setting\"\310\001\n\005S"
  "lice\022,\n\014object_lists\030\001 \003(\0132\026.cura.proto."
  "ObjectList\0220\n\017global_settings\030\002 \001(\0132\027.cu"
  "ra.proto.SettingList\022\'\n\textruders\030\003 \003(\0132"
  "\024.cura.proto.Extruder\0226\n\021limit_to_extrud"
  "er\030\004 \003(\0132\033.cura.proto.SettingExtruder\"A\n"
  "\010Extruder\022\n\n\002id\030\001 \001(\005\022)\n\010settings\030\002 \001(\0132"
  "\027.cura.proto.SettingList\"}\n\006Object\022\n\n\002id"
  "\030\001 \001(\003\022\020\n\010vertices\030\002 \001(\014\022\017\n\007normals\030\003 \001("
  "\014\022\017\n\007indices\030\004 \001(\014\022%\n\010settings\030\005 \003(\0132\023.c"
  "ura.proto.Setting\022\014\n\004name\030\006 \001(\t\"\032\n\010Progr"
  "ess\022\016\n\006amount\030\001 \001(\002\"]\n\005Layer\022\n\n\002id\030\001 \001(\005"
  "\022\016\n\006height\030\002 \001(\002\022\021\n\tthickness\030\003 \001(\002\022%\n\010p"
  "olygons\030\004 \003(\0132\023.cura.proto.Polygon\"\353\002\n\007P"
  "olygon\022&\n\004type\030\001 \001(\0162\030.cura.proto.Polygo"
  "n.Type\022\016\n\006points\030\002 \001(\014\022\022\n\nline_width\030\003 \001"
  "(\002\022\026\n\016line_thickness\030\004 \001(\002\022\025\n\rline_feedr"
  "ate\030\005 \001(\002\"\344\001\n\004Type\022\014\n\010NoneType\020\000\022\016\n\nInse"
  "t0Type\020\001\022\016\n\nInsetXType\020\002\022\014\n\010SkinType\020\003\022\017"
  "\n\013SupportType\020\004\022\r\n\tSkirtType\020\005\022\016\n\nInfill"
  "Type\020\006\022\025\n\021SupportInfillType\020\007\022\023\n\017MoveCom"
  "bingType\020\010\022\026\n\022MoveRetractionType\020\t\022\030\n\024Su"
  "pportInterfaceType\020\n\022\022\n\016PrimeTowerType\020\013"
  "\"n\n\016LayerOptimized\022\n\n\002id\030\001 \001(\005\022\016\n\006height"
  "\030\002 \001(\002\022\021\n\tthickness\030\003 \001(\002\022-\n\014path_segmen"
  "t\030\004 \003(\0132\027.cura.proto.PathSegment\"\343\001\n\013Pat"
  "hSegment\022\020\n\010extruder\030\001 \001(\005\0225\n\npoint_type"
  "\030\002 \001(\0162!.cura.proto.PathSegment.PointTyp"
  "e\022\016\n\006points\030\003 \001(\014\022\021\n\tline_type\030\004 \001(\014\022\022\n\n"
  "line_width\030\005 \001(\014\022\026\n\016line_thickness\030\006 \001(\014"
  "\022\025\n\rline_feedrate\030\007 \001(\014\"%\n\tPointType\022\013\n\007"
  "Point2D\020\000\022\013\n\007Point3D\020\001\"\032\n\nGCodeLayer\022\014\n\004"
  "data\030\002 \001(\014\"\351\002\n\032PrintTimeMaterialEstimate"
  "s\022\021\n\ttime_none\030\001 \001(\002\022\024\n\014time_inset_0\030\002 \001"
  "(\002\022\024\n\014time_inset_x\030\003 \001(\002\022\021\n\ttime_skin\030\004 "
  "\001(\002\022\024\n\014time_support\030\005 \001(\002\022\022\n\ntime_skirt\030"
  "\006 \001(\002\022\023\n\013time_infill\030\007 \001(\002\022\033\n\023time_suppo"
  "rt_infill\030\010 \001(\002\022\023\n\013time_travel\030\t \001(\002\022\024\n\014"
  "time_retract\030\n \001(\002\022\036\n\026time_support_inter"
  "face\030\013 \001(\002\022\030\n\020time_prime_tower\030\014 \001(\002\0228\n\021"
  "materialEstimates\030\r \003(\0132\035.cura.proto.Mat"
  "erialEstimates\"8\n\021MaterialEstimates\022\n\n\002i"
  "d\030\001 \001(\003\022\027\n\017material_amount\030\002 \001(\002\"4\n\013Sett"
  "ingList\022%\n\010settings\030\001 \003(\0132\023.cura.proto.S"
  "etting\"&\n\007Setting\022\014\n\004name\030\001 \001(\t\022\r\n\005value"
  "\030\002 \001(\014\"1\n\017SettingExtruder\022\014\n\004name\030\001 \001(\t\022"
  "\020\n\010extruder\030\002 \001(\005\"\033\n\013GCodePrefix\022\014\n\004data"
  "\030\002 \001(\014\"\021\n\017SlicingFinishedb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Cura_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Cura_2eproto_sccs[17] = {
  &scc_info_Extruder_Cura_2eproto.base,
  &scc_info_GCodeLayer_Cura_2eproto.base,
  &scc_info_GCodePrefix_Cura_2eproto.base,
  &scc_info_Layer_Cura_2eproto.base,
  &scc_info_LayerOptimized_Cura_2eproto.base,
  &scc_info_MaterialEstimates_Cura_2eproto.base,
  &scc_info_Object_Cura_2eproto.base,
  &scc_info_ObjectList_Cura_2eproto.base,
  &scc_info_PathSegment_Cura_2eproto.base,
  &scc_info_Polygon_Cura_2eproto.base,
  &scc_info_PrintTimeMaterialEstimates_Cura_2eproto.base,
  &scc_info_Progress_Cura_2eproto.base,
  &scc_info_Setting_Cura_2eproto.base,
  &scc_info_SettingExtruder_Cura_2eproto.base,
  &scc_info_SettingList_Cura_2eproto.base,
  &scc_info_Slice_Cura_2eproto.base,
  &scc_info_SlicingFinished_Cura_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Cura_2eproto_once;
static bool descriptor_table_Cura_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Cura_2eproto = {
  &descriptor_table_Cura_2eproto_initialized, descriptor_table_protodef_Cura_2eproto, "Cura.proto", 1993,
  &descriptor_table_Cura_2eproto_once, descriptor_table_Cura_2eproto_sccs, descriptor_table_Cura_2eproto_deps, 17, 0,
  schemas, file_default_instances, TableStruct_Cura_2eproto::offsets,
  file_level_metadata_Cura_2eproto, 17, file_level_enum_descriptors_Cura_2eproto, file_level_service_descriptors_Cura_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Cura_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Cura_2eproto), true);
namespace cura {
namespace proto {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Polygon_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Cura_2eproto);
  return file_level_enum_descriptors_Cura_2eproto[0];
}
bool Polygon_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Polygon_Type Polygon::NoneType;
constexpr Polygon_Type Polygon::Inset0Type;
constexpr Polygon_Type Polygon::InsetXType;
constexpr Polygon_Type Polygon::SkinType;
constexpr Polygon_Type Polygon::SupportType;
constexpr Polygon_Type Polygon::SkirtType;
constexpr Polygon_Type Polygon::InfillType;
constexpr Polygon_Type Polygon::SupportInfillType;
constexpr Polygon_Type Polygon::MoveCombingType;
constexpr Polygon_Type Polygon::MoveRetractionType;
constexpr Polygon_Type Polygon::SupportInterfaceType;
constexpr Polygon_Type Polygon::PrimeTowerType;
constexpr Polygon_Type Polygon::Type_MIN;
constexpr Polygon_Type Polygon::Type_MAX;
constexpr int Polygon::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PathSegment_PointType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Cura_2eproto);
  return file_level_enum_descriptors_Cura_2eproto[1];
}
bool PathSegment_PointType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PathSegment_PointType PathSegment::Point2D;
constexpr PathSegment_PointType PathSegment::Point3D;
constexpr PathSegment_PointType PathSegment::PointType_MIN;
constexpr PathSegment_PointType PathSegment::PointType_MAX;
constexpr int PathSegment::PointType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void ObjectList::InitAsDefaultInstance() {
}
class ObjectList::_Internal {
 public:
};

ObjectList::ObjectList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cura.proto.ObjectList)
}
ObjectList::ObjectList(const ObjectList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      objects_(from.objects_),
      settings_(from.settings_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cura.proto.ObjectList)
}

void ObjectList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ObjectList_Cura_2eproto.base);
}

ObjectList::~ObjectList() {
  // @@protoc_insertion_point(destructor:cura.proto.ObjectList)
  SharedDtor();
}

void ObjectList::SharedDtor() {
}

void ObjectList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObjectList& ObjectList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ObjectList_Cura_2eproto.base);
  return *internal_default_instance();
}


void ObjectList::Clear() {
// @@protoc_insertion_point(message_clear_start:cura.proto.ObjectList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  objects_.Clear();
  settings_.Clear();
  _internal_metadata_.Clear();
}

const char* ObjectList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .cura.proto.Object objects = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_objects(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .cura.proto.Setting settings = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_settings(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObjectList::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cura.proto.ObjectList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cura.proto.Object objects = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_objects_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_objects(i), target, stream);
  }

  // repeated .cura.proto.Setting settings = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_settings_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(2, this->_internal_settings(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cura.proto.ObjectList)
  return target;
}

size_t ObjectList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cura.proto.ObjectList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cura.proto.Object objects = 1;
  total_size += 1UL * this->_internal_objects_size();
  for (const auto& msg : this->objects_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .cura.proto.Setting settings = 2;
  total_size += 1UL * this->_internal_settings_size();
  for (const auto& msg : this->settings_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObjectList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cura.proto.ObjectList)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObjectList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cura.proto.ObjectList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cura.proto.ObjectList)
    MergeFrom(*source);
  }
}

void ObjectList::MergeFrom(const ObjectList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cura.proto.ObjectList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  objects_.MergeFrom(from.objects_);
  settings_.MergeFrom(from.settings_);
}

void ObjectList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cura.proto.ObjectList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectList::CopyFrom(const ObjectList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cura.proto.ObjectList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectList::IsInitialized() const {
  return true;
}

void ObjectList::InternalSwap(ObjectList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  objects_.InternalSwap(&other->objects_);
  settings_.InternalSwap(&other->settings_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Slice::InitAsDefaultInstance() {
  ::cura::proto::_Slice_default_instance_._instance.get_mutable()->global_settings_ = const_cast< ::cura::proto::SettingList*>(
      ::cura::proto::SettingList::internal_default_instance());
}
class Slice::_Internal {
 public:
  static const ::cura::proto::SettingList& global_settings(const Slice* msg);
};

const ::cura::proto::SettingList&
Slice::_Internal::global_settings(const Slice* msg) {
  return *msg->global_settings_;
}
Slice::Slice()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cura.proto.Slice)
}
Slice::Slice(const Slice& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      object_lists_(from.object_lists_),
      extruders_(from.extruders_),
      limit_to_extruder_(from.limit_to_extruder_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_global_settings()) {
    global_settings_ = new ::cura::proto::SettingList(*from.global_settings_);
  } else {
    global_settings_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:cura.proto.Slice)
}

void Slice::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Slice_Cura_2eproto.base);
  global_settings_ = nullptr;
}

Slice::~Slice() {
  // @@protoc_insertion_point(destructor:cura.proto.Slice)
  SharedDtor();
}

void Slice::SharedDtor() {
  if (this != internal_default_instance()) delete global_settings_;
}

void Slice::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Slice& Slice::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Slice_Cura_2eproto.base);
  return *internal_default_instance();
}


void Slice::Clear() {
// @@protoc_insertion_point(message_clear_start:cura.proto.Slice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_lists_.Clear();
  extruders_.Clear();
  limit_to_extruder_.Clear();
  if (GetArenaNoVirtual() == nullptr && global_settings_ != nullptr) {
    delete global_settings_;
  }
  global_settings_ = nullptr;
  _internal_metadata_.Clear();
}

const char* Slice::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .cura.proto.ObjectList object_lists = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_object_lists(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .cura.proto.SettingList global_settings = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_global_settings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .cura.proto.Extruder extruders = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_extruders(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .cura.proto.SettingExtruder limit_to_extruder = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_limit_to_extruder(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Slice::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cura.proto.Slice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cura.proto.ObjectList object_lists = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_object_lists_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_object_lists(i), target, stream);
  }

  // .cura.proto.SettingList global_settings = 2;
  if (this->has_global_settings()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::global_settings(this), target, stream);
  }

  // repeated .cura.proto.Extruder extruders = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_extruders_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(3, this->_internal_extruders(i), target, stream);
  }

  // repeated .cura.proto.SettingExtruder limit_to_extruder = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_limit_to_extruder_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(4, this->_internal_limit_to_extruder(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cura.proto.Slice)
  return target;
}

size_t Slice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cura.proto.Slice)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cura.proto.ObjectList object_lists = 1;
  total_size += 1UL * this->_internal_object_lists_size();
  for (const auto& msg : this->object_lists_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .cura.proto.Extruder extruders = 3;
  total_size += 1UL * this->_internal_extruders_size();
  for (const auto& msg : this->extruders_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .cura.proto.SettingExtruder limit_to_extruder = 4;
  total_size += 1UL * this->_internal_limit_to_extruder_size();
  for (const auto& msg : this->limit_to_extruder_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .cura.proto.SettingList global_settings = 2;
  if (this->has_global_settings()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *global_settings_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Slice::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cura.proto.Slice)
  GOOGLE_DCHECK_NE(&from, this);
  const Slice* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Slice>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cura.proto.Slice)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cura.proto.Slice)
    MergeFrom(*source);
  }
}

void Slice::MergeFrom(const Slice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cura.proto.Slice)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  object_lists_.MergeFrom(from.object_lists_);
  extruders_.MergeFrom(from.extruders_);
  limit_to_extruder_.MergeFrom(from.limit_to_extruder_);
  if (from.has_global_settings()) {
    _internal_mutable_global_settings()->::cura::proto::SettingList::MergeFrom(from._internal_global_settings());
  }
}

void Slice::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cura.proto.Slice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Slice::CopyFrom(const Slice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cura.proto.Slice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Slice::IsInitialized() const {
  return true;
}

void Slice::InternalSwap(Slice* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  object_lists_.InternalSwap(&other->object_lists_);
  extruders_.InternalSwap(&other->extruders_);
  limit_to_extruder_.InternalSwap(&other->limit_to_extruder_);
  swap(global_settings_, other->global_settings_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Slice::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Extruder::InitAsDefaultInstance() {
  ::cura::proto::_Extruder_default_instance_._instance.get_mutable()->settings_ = const_cast< ::cura::proto::SettingList*>(
      ::cura::proto::SettingList::internal_default_instance());
}
class Extruder::_Internal {
 public:
  static const ::cura::proto::SettingList& settings(const Extruder* msg);
};

const ::cura::proto::SettingList&
Extruder::_Internal::settings(const Extruder* msg) {
  return *msg->settings_;
}
Extruder::Extruder()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cura.proto.Extruder)
}
Extruder::Extruder(const Extruder& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_settings()) {
    settings_ = new ::cura::proto::SettingList(*from.settings_);
  } else {
    settings_ = nullptr;
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:cura.proto.Extruder)
}

void Extruder::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Extruder_Cura_2eproto.base);
  ::memset(&settings_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&settings_)) + sizeof(id_));
}

Extruder::~Extruder() {
  // @@protoc_insertion_point(destructor:cura.proto.Extruder)
  SharedDtor();
}

void Extruder::SharedDtor() {
  if (this != internal_default_instance()) delete settings_;
}

void Extruder::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Extruder& Extruder::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Extruder_Cura_2eproto.base);
  return *internal_default_instance();
}


void Extruder::Clear() {
// @@protoc_insertion_point(message_clear_start:cura.proto.Extruder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && settings_ != nullptr) {
    delete settings_;
  }
  settings_ = nullptr;
  id_ = 0;
  _internal_metadata_.Clear();
}

const char* Extruder::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cura.proto.SettingList settings = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_settings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Extruder::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cura.proto.Extruder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // .cura.proto.SettingList settings = 2;
  if (this->has_settings()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::settings(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cura.proto.Extruder)
  return target;
}

size_t Extruder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cura.proto.Extruder)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cura.proto.SettingList settings = 2;
  if (this->has_settings()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *settings_);
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Extruder::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cura.proto.Extruder)
  GOOGLE_DCHECK_NE(&from, this);
  const Extruder* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Extruder>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cura.proto.Extruder)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cura.proto.Extruder)
    MergeFrom(*source);
  }
}

void Extruder::MergeFrom(const Extruder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cura.proto.Extruder)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_settings()) {
    _internal_mutable_settings()->::cura::proto::SettingList::MergeFrom(from._internal_settings());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void Extruder::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cura.proto.Extruder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Extruder::CopyFrom(const Extruder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cura.proto.Extruder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Extruder::IsInitialized() const {
  return true;
}

void Extruder::InternalSwap(Extruder* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(settings_, other->settings_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Extruder::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Object::InitAsDefaultInstance() {
}
class Object::_Internal {
 public:
};

Object::Object()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cura.proto.Object)
}
Object::Object(const Object& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      settings_(from.settings_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  vertices_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_vertices().empty()) {
    vertices_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.vertices_);
  }
  normals_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_normals().empty()) {
    normals_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.normals_);
  }
  indices_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_indices().empty()) {
    indices_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.indices_);
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:cura.proto.Object)
}

void Object::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Object_Cura_2eproto.base);
  vertices_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  normals_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  indices_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_ = PROTOBUF_LONGLONG(0);
}

Object::~Object() {
  // @@protoc_insertion_point(destructor:cura.proto.Object)
  SharedDtor();
}

void Object::SharedDtor() {
  vertices_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  normals_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  indices_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Object::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Object& Object::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Object_Cura_2eproto.base);
  return *internal_default_instance();
}


void Object::Clear() {
// @@protoc_insertion_point(message_clear_start:cura.proto.Object)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  settings_.Clear();
  vertices_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  normals_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  indices_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* Object::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes vertices = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_vertices(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes normals = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_normals(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes indices = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_indices(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .cura.proto.Setting settings = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_settings(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // string name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_name(), ptr, ctx, "cura.proto.Object.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Object::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cura.proto.Object)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // bytes vertices = 2;
  if (this->vertices().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_vertices(), target);
  }

  // bytes normals = 3;
  if (this->normals().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_normals(), target);
  }

  // bytes indices = 4;
  if (this->indices().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_indices(), target);
  }

  // repeated .cura.proto.Setting settings = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_settings_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(5, this->_internal_settings(i), target, stream);
  }

  // string name = 6;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cura.proto.Object.name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cura.proto.Object)
  return target;
}

size_t Object::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cura.proto.Object)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cura.proto.Setting settings = 5;
  total_size += 1UL * this->_internal_settings_size();
  for (const auto& msg : this->settings_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes vertices = 2;
  if (this->vertices().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_vertices());
  }

  // bytes normals = 3;
  if (this->normals().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_normals());
  }

  // bytes indices = 4;
  if (this->indices().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_indices());
  }

  // string name = 6;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Object::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cura.proto.Object)
  GOOGLE_DCHECK_NE(&from, this);
  const Object* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Object>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cura.proto.Object)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cura.proto.Object)
    MergeFrom(*source);
  }
}

void Object::MergeFrom(const Object& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cura.proto.Object)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  settings_.MergeFrom(from.settings_);
  if (from.vertices().size() > 0) {

    vertices_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.vertices_);
  }
  if (from.normals().size() > 0) {

    normals_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.normals_);
  }
  if (from.indices().size() > 0) {

    indices_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.indices_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void Object::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cura.proto.Object)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Object::CopyFrom(const Object& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cura.proto.Object)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Object::IsInitialized() const {
  return true;
}

void Object::InternalSwap(Object* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  settings_.InternalSwap(&other->settings_);
  vertices_.Swap(&other->vertices_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  normals_.Swap(&other->normals_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  indices_.Swap(&other->indices_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Object::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Progress::InitAsDefaultInstance() {
}
class Progress::_Internal {
 public:
};

Progress::Progress()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cura.proto.Progress)
}
Progress::Progress(const Progress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  amount_ = from.amount_;
  // @@protoc_insertion_point(copy_constructor:cura.proto.Progress)
}

void Progress::SharedCtor() {
  amount_ = 0;
}

Progress::~Progress() {
  // @@protoc_insertion_point(destructor:cura.proto.Progress)
  SharedDtor();
}

void Progress::SharedDtor() {
}

void Progress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Progress& Progress::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Progress_Cura_2eproto.base);
  return *internal_default_instance();
}


void Progress::Clear() {
// @@protoc_insertion_point(message_clear_start:cura.proto.Progress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  amount_ = 0;
  _internal_metadata_.Clear();
}

const char* Progress::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float amount = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Progress::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cura.proto.Progress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float amount = 1;
  if (!(this->amount() <= 0 && this->amount() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cura.proto.Progress)
  return target;
}

size_t Progress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cura.proto.Progress)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float amount = 1;
  if (!(this->amount() <= 0 && this->amount() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Progress::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cura.proto.Progress)
  GOOGLE_DCHECK_NE(&from, this);
  const Progress* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Progress>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cura.proto.Progress)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cura.proto.Progress)
    MergeFrom(*source);
  }
}

void Progress::MergeFrom(const Progress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cura.proto.Progress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.amount() <= 0 && from.amount() >= 0)) {
    _internal_set_amount(from._internal_amount());
  }
}

void Progress::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cura.proto.Progress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Progress::CopyFrom(const Progress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cura.proto.Progress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Progress::IsInitialized() const {
  return true;
}

void Progress::InternalSwap(Progress* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(amount_, other->amount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Progress::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Layer::InitAsDefaultInstance() {
}
class Layer::_Internal {
 public:
};

Layer::Layer()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cura.proto.Layer)
}
Layer::Layer(const Layer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      polygons_(from.polygons_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&thickness_) -
    reinterpret_cast<char*>(&id_)) + sizeof(thickness_));
  // @@protoc_insertion_point(copy_constructor:cura.proto.Layer)
}

void Layer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Layer_Cura_2eproto.base);
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&thickness_) -
      reinterpret_cast<char*>(&id_)) + sizeof(thickness_));
}

Layer::~Layer() {
  // @@protoc_insertion_point(destructor:cura.proto.Layer)
  SharedDtor();
}

void Layer::SharedDtor() {
}

void Layer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Layer& Layer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Layer_Cura_2eproto.base);
  return *internal_default_instance();
}


void Layer::Clear() {
// @@protoc_insertion_point(message_clear_start:cura.proto.Layer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  polygons_.Clear();
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&thickness_) -
      reinterpret_cast<char*>(&id_)) + sizeof(thickness_));
  _internal_metadata_.Clear();
}

const char* Layer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float thickness = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          thickness_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated .cura.proto.Polygon polygons = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_polygons(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Layer::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cura.proto.Layer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // float height = 2;
  if (!(this->height() <= 0 && this->height() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_height(), target);
  }

  // float thickness = 3;
  if (!(this->thickness() <= 0 && this->thickness() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_thickness(), target);
  }

  // repeated .cura.proto.Polygon polygons = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_polygons_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(4, this->_internal_polygons(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cura.proto.Layer)
  return target;
}

size_t Layer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cura.proto.Layer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cura.proto.Polygon polygons = 4;
  total_size += 1UL * this->_internal_polygons_size();
  for (const auto& msg : this->polygons_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // float height = 2;
  if (!(this->height() <= 0 && this->height() >= 0)) {
    total_size += 1 + 4;
  }

  // float thickness = 3;
  if (!(this->thickness() <= 0 && this->thickness() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Layer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cura.proto.Layer)
  GOOGLE_DCHECK_NE(&from, this);
  const Layer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Layer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cura.proto.Layer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cura.proto.Layer)
    MergeFrom(*source);
  }
}

void Layer::MergeFrom(const Layer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cura.proto.Layer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  polygons_.MergeFrom(from.polygons_);
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (!(from.height() <= 0 && from.height() >= 0)) {
    _internal_set_height(from._internal_height());
  }
  if (!(from.thickness() <= 0 && from.thickness() >= 0)) {
    _internal_set_thickness(from._internal_thickness());
  }
}

void Layer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cura.proto.Layer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Layer::CopyFrom(const Layer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cura.proto.Layer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Layer::IsInitialized() const {
  return true;
}

void Layer::InternalSwap(Layer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  polygons_.InternalSwap(&other->polygons_);
  swap(id_, other->id_);
  swap(height_, other->height_);
  swap(thickness_, other->thickness_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Layer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Polygon::InitAsDefaultInstance() {
}
class Polygon::_Internal {
 public:
};

Polygon::Polygon()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cura.proto.Polygon)
}
Polygon::Polygon(const Polygon& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  points_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_points().empty()) {
    points_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.points_);
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&line_feedrate_) -
    reinterpret_cast<char*>(&type_)) + sizeof(line_feedrate_));
  // @@protoc_insertion_point(copy_constructor:cura.proto.Polygon)
}

void Polygon::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Polygon_Cura_2eproto.base);
  points_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&line_feedrate_) -
      reinterpret_cast<char*>(&type_)) + sizeof(line_feedrate_));
}

Polygon::~Polygon() {
  // @@protoc_insertion_point(destructor:cura.proto.Polygon)
  SharedDtor();
}

void Polygon::SharedDtor() {
  points_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Polygon::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Polygon& Polygon::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Polygon_Cura_2eproto.base);
  return *internal_default_instance();
}


void Polygon::Clear() {
// @@protoc_insertion_point(message_clear_start:cura.proto.Polygon)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  points_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&line_feedrate_) -
      reinterpret_cast<char*>(&type_)) + sizeof(line_feedrate_));
  _internal_metadata_.Clear();
}

const char* Polygon::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .cura.proto.Polygon.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::cura::proto::Polygon_Type>(val));
        } else goto handle_unusual;
        continue;
      // bytes points = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_points(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float line_width = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          line_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float line_thickness = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          line_thickness_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float line_feedrate = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          line_feedrate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Polygon::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cura.proto.Polygon)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cura.proto.Polygon.Type type = 1;
  if (this->type() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // bytes points = 2;
  if (this->points().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_points(), target);
  }

  // float line_width = 3;
  if (!(this->line_width() <= 0 && this->line_width() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_line_width(), target);
  }

  // float line_thickness = 4;
  if (!(this->line_thickness() <= 0 && this->line_thickness() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_line_thickness(), target);
  }

  // float line_feedrate = 5;
  if (!(this->line_feedrate() <= 0 && this->line_feedrate() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_line_feedrate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cura.proto.Polygon)
  return target;
}

size_t Polygon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cura.proto.Polygon)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes points = 2;
  if (this->points().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_points());
  }

  // .cura.proto.Polygon.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // float line_width = 3;
  if (!(this->line_width() <= 0 && this->line_width() >= 0)) {
    total_size += 1 + 4;
  }

  // float line_thickness = 4;
  if (!(this->line_thickness() <= 0 && this->line_thickness() >= 0)) {
    total_size += 1 + 4;
  }

  // float line_feedrate = 5;
  if (!(this->line_feedrate() <= 0 && this->line_feedrate() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Polygon::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cura.proto.Polygon)
  GOOGLE_DCHECK_NE(&from, this);
  const Polygon* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Polygon>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cura.proto.Polygon)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cura.proto.Polygon)
    MergeFrom(*source);
  }
}

void Polygon::MergeFrom(const Polygon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cura.proto.Polygon)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.points().size() > 0) {

    points_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.points_);
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (!(from.line_width() <= 0 && from.line_width() >= 0)) {
    _internal_set_line_width(from._internal_line_width());
  }
  if (!(from.line_thickness() <= 0 && from.line_thickness() >= 0)) {
    _internal_set_line_thickness(from._internal_line_thickness());
  }
  if (!(from.line_feedrate() <= 0 && from.line_feedrate() >= 0)) {
    _internal_set_line_feedrate(from._internal_line_feedrate());
  }
}

void Polygon::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cura.proto.Polygon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Polygon::CopyFrom(const Polygon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cura.proto.Polygon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Polygon::IsInitialized() const {
  return true;
}

void Polygon::InternalSwap(Polygon* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  points_.Swap(&other->points_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
  swap(line_width_, other->line_width_);
  swap(line_thickness_, other->line_thickness_);
  swap(line_feedrate_, other->line_feedrate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Polygon::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LayerOptimized::InitAsDefaultInstance() {
}
class LayerOptimized::_Internal {
 public:
};

LayerOptimized::LayerOptimized()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cura.proto.LayerOptimized)
}
LayerOptimized::LayerOptimized(const LayerOptimized& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      path_segment_(from.path_segment_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&thickness_) -
    reinterpret_cast<char*>(&id_)) + sizeof(thickness_));
  // @@protoc_insertion_point(copy_constructor:cura.proto.LayerOptimized)
}

void LayerOptimized::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LayerOptimized_Cura_2eproto.base);
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&thickness_) -
      reinterpret_cast<char*>(&id_)) + sizeof(thickness_));
}

LayerOptimized::~LayerOptimized() {
  // @@protoc_insertion_point(destructor:cura.proto.LayerOptimized)
  SharedDtor();
}

void LayerOptimized::SharedDtor() {
}

void LayerOptimized::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LayerOptimized& LayerOptimized::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LayerOptimized_Cura_2eproto.base);
  return *internal_default_instance();
}


void LayerOptimized::Clear() {
// @@protoc_insertion_point(message_clear_start:cura.proto.LayerOptimized)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_segment_.Clear();
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&thickness_) -
      reinterpret_cast<char*>(&id_)) + sizeof(thickness_));
  _internal_metadata_.Clear();
}

const char* LayerOptimized::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float thickness = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          thickness_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated .cura.proto.PathSegment path_segment = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_path_segment(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LayerOptimized::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cura.proto.LayerOptimized)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // float height = 2;
  if (!(this->height() <= 0 && this->height() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_height(), target);
  }

  // float thickness = 3;
  if (!(this->thickness() <= 0 && this->thickness() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_thickness(), target);
  }

  // repeated .cura.proto.PathSegment path_segment = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_path_segment_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(4, this->_internal_path_segment(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cura.proto.LayerOptimized)
  return target;
}

size_t LayerOptimized::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cura.proto.LayerOptimized)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cura.proto.PathSegment path_segment = 4;
  total_size += 1UL * this->_internal_path_segment_size();
  for (const auto& msg : this->path_segment_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // float height = 2;
  if (!(this->height() <= 0 && this->height() >= 0)) {
    total_size += 1 + 4;
  }

  // float thickness = 3;
  if (!(this->thickness() <= 0 && this->thickness() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LayerOptimized::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cura.proto.LayerOptimized)
  GOOGLE_DCHECK_NE(&from, this);
  const LayerOptimized* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LayerOptimized>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cura.proto.LayerOptimized)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cura.proto.LayerOptimized)
    MergeFrom(*source);
  }
}

void LayerOptimized::MergeFrom(const LayerOptimized& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cura.proto.LayerOptimized)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  path_segment_.MergeFrom(from.path_segment_);
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (!(from.height() <= 0 && from.height() >= 0)) {
    _internal_set_height(from._internal_height());
  }
  if (!(from.thickness() <= 0 && from.thickness() >= 0)) {
    _internal_set_thickness(from._internal_thickness());
  }
}

void LayerOptimized::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cura.proto.LayerOptimized)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LayerOptimized::CopyFrom(const LayerOptimized& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cura.proto.LayerOptimized)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LayerOptimized::IsInitialized() const {
  return true;
}

void LayerOptimized::InternalSwap(LayerOptimized* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  path_segment_.InternalSwap(&other->path_segment_);
  swap(id_, other->id_);
  swap(height_, other->height_);
  swap(thickness_, other->thickness_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LayerOptimized::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PathSegment::InitAsDefaultInstance() {
}
class PathSegment::_Internal {
 public:
};

PathSegment::PathSegment()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cura.proto.PathSegment)
}
PathSegment::PathSegment(const PathSegment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  points_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_points().empty()) {
    points_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.points_);
  }
  line_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_line_type().empty()) {
    line_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.line_type_);
  }
  line_width_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_line_width().empty()) {
    line_width_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.line_width_);
  }
  line_thickness_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_line_thickness().empty()) {
    line_thickness_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.line_thickness_);
  }
  line_feedrate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_line_feedrate().empty()) {
    line_feedrate_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.line_feedrate_);
  }
  ::memcpy(&extruder_, &from.extruder_,
    static_cast<size_t>(reinterpret_cast<char*>(&point_type_) -
    reinterpret_cast<char*>(&extruder_)) + sizeof(point_type_));
  // @@protoc_insertion_point(copy_constructor:cura.proto.PathSegment)
}

void PathSegment::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PathSegment_Cura_2eproto.base);
  points_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  line_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  line_width_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  line_thickness_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  line_feedrate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&extruder_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&point_type_) -
      reinterpret_cast<char*>(&extruder_)) + sizeof(point_type_));
}

PathSegment::~PathSegment() {
  // @@protoc_insertion_point(destructor:cura.proto.PathSegment)
  SharedDtor();
}

void PathSegment::SharedDtor() {
  points_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  line_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  line_width_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  line_thickness_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  line_feedrate_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PathSegment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PathSegment& PathSegment::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PathSegment_Cura_2eproto.base);
  return *internal_default_instance();
}


void PathSegment::Clear() {
// @@protoc_insertion_point(message_clear_start:cura.proto.PathSegment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  points_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  line_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  line_width_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  line_thickness_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  line_feedrate_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&extruder_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&point_type_) -
      reinterpret_cast<char*>(&extruder_)) + sizeof(point_type_));
  _internal_metadata_.Clear();
}

const char* PathSegment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 extruder = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          extruder_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cura.proto.PathSegment.PointType point_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_point_type(static_cast<::cura::proto::PathSegment_PointType>(val));
        } else goto handle_unusual;
        continue;
      // bytes points = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_points(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes line_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_line_type(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes line_width = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_line_width(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes line_thickness = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_line_thickness(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes line_feedrate = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_line_feedrate(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PathSegment::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cura.proto.PathSegment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 extruder = 1;
  if (this->extruder() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_extruder(), target);
  }

  // .cura.proto.PathSegment.PointType point_type = 2;
  if (this->point_type() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_point_type(), target);
  }

  // bytes points = 3;
  if (this->points().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_points(), target);
  }

  // bytes line_type = 4;
  if (this->line_type().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_line_type(), target);
  }

  // bytes line_width = 5;
  if (this->line_width().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_line_width(), target);
  }

  // bytes line_thickness = 6;
  if (this->line_thickness().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_line_thickness(), target);
  }

  // bytes line_feedrate = 7;
  if (this->line_feedrate().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_line_feedrate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cura.proto.PathSegment)
  return target;
}

size_t PathSegment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cura.proto.PathSegment)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes points = 3;
  if (this->points().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_points());
  }

  // bytes line_type = 4;
  if (this->line_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_line_type());
  }

  // bytes line_width = 5;
  if (this->line_width().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_line_width());
  }

  // bytes line_thickness = 6;
  if (this->line_thickness().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_line_thickness());
  }

  // bytes line_feedrate = 7;
  if (this->line_feedrate().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_line_feedrate());
  }

  // int32 extruder = 1;
  if (this->extruder() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_extruder());
  }

  // .cura.proto.PathSegment.PointType point_type = 2;
  if (this->point_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_point_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PathSegment::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cura.proto.PathSegment)
  GOOGLE_DCHECK_NE(&from, this);
  const PathSegment* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PathSegment>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cura.proto.PathSegment)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cura.proto.PathSegment)
    MergeFrom(*source);
  }
}

void PathSegment::MergeFrom(const PathSegment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cura.proto.PathSegment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.points().size() > 0) {

    points_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.points_);
  }
  if (from.line_type().size() > 0) {

    line_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.line_type_);
  }
  if (from.line_width().size() > 0) {

    line_width_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.line_width_);
  }
  if (from.line_thickness().size() > 0) {

    line_thickness_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.line_thickness_);
  }
  if (from.line_feedrate().size() > 0) {

    line_feedrate_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.line_feedrate_);
  }
  if (from.extruder() != 0) {
    _internal_set_extruder(from._internal_extruder());
  }
  if (from.point_type() != 0) {
    _internal_set_point_type(from._internal_point_type());
  }
}

void PathSegment::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cura.proto.PathSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PathSegment::CopyFrom(const PathSegment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cura.proto.PathSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathSegment::IsInitialized() const {
  return true;
}

void PathSegment::InternalSwap(PathSegment* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  points_.Swap(&other->points_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  line_type_.Swap(&other->line_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  line_width_.Swap(&other->line_width_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  line_thickness_.Swap(&other->line_thickness_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  line_feedrate_.Swap(&other->line_feedrate_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(extruder_, other->extruder_);
  swap(point_type_, other->point_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PathSegment::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GCodeLayer::InitAsDefaultInstance() {
}
class GCodeLayer::_Internal {
 public:
};

GCodeLayer::GCodeLayer()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cura.proto.GCodeLayer)
}
GCodeLayer::GCodeLayer(const GCodeLayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  // @@protoc_insertion_point(copy_constructor:cura.proto.GCodeLayer)
}

void GCodeLayer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GCodeLayer_Cura_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GCodeLayer::~GCodeLayer() {
  // @@protoc_insertion_point(destructor:cura.proto.GCodeLayer)
  SharedDtor();
}

void GCodeLayer::SharedDtor() {
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GCodeLayer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GCodeLayer& GCodeLayer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GCodeLayer_Cura_2eproto.base);
  return *internal_default_instance();
}


void GCodeLayer::Clear() {
// @@protoc_insertion_point(message_clear_start:cura.proto.GCodeLayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* GCodeLayer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GCodeLayer::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cura.proto.GCodeLayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 2;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cura.proto.GCodeLayer)
  return target;
}

size_t GCodeLayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cura.proto.GCodeLayer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GCodeLayer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cura.proto.GCodeLayer)
  GOOGLE_DCHECK_NE(&from, this);
  const GCodeLayer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GCodeLayer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cura.proto.GCodeLayer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cura.proto.GCodeLayer)
    MergeFrom(*source);
  }
}

void GCodeLayer::MergeFrom(const GCodeLayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cura.proto.GCodeLayer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
}

void GCodeLayer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cura.proto.GCodeLayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCodeLayer::CopyFrom(const GCodeLayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cura.proto.GCodeLayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCodeLayer::IsInitialized() const {
  return true;
}

void GCodeLayer::InternalSwap(GCodeLayer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata GCodeLayer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PrintTimeMaterialEstimates::InitAsDefaultInstance() {
}
class PrintTimeMaterialEstimates::_Internal {
 public:
};

PrintTimeMaterialEstimates::PrintTimeMaterialEstimates()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cura.proto.PrintTimeMaterialEstimates)
}
PrintTimeMaterialEstimates::PrintTimeMaterialEstimates(const PrintTimeMaterialEstimates& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      materialestimates_(from.materialestimates_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&time_none_, &from.time_none_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_prime_tower_) -
    reinterpret_cast<char*>(&time_none_)) + sizeof(time_prime_tower_));
  // @@protoc_insertion_point(copy_constructor:cura.proto.PrintTimeMaterialEstimates)
}

void PrintTimeMaterialEstimates::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PrintTimeMaterialEstimates_Cura_2eproto.base);
  ::memset(&time_none_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_prime_tower_) -
      reinterpret_cast<char*>(&time_none_)) + sizeof(time_prime_tower_));
}

PrintTimeMaterialEstimates::~PrintTimeMaterialEstimates() {
  // @@protoc_insertion_point(destructor:cura.proto.PrintTimeMaterialEstimates)
  SharedDtor();
}

void PrintTimeMaterialEstimates::SharedDtor() {
}

void PrintTimeMaterialEstimates::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PrintTimeMaterialEstimates& PrintTimeMaterialEstimates::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PrintTimeMaterialEstimates_Cura_2eproto.base);
  return *internal_default_instance();
}


void PrintTimeMaterialEstimates::Clear() {
// @@protoc_insertion_point(message_clear_start:cura.proto.PrintTimeMaterialEstimates)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  materialestimates_.Clear();
  ::memset(&time_none_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_prime_tower_) -
      reinterpret_cast<char*>(&time_none_)) + sizeof(time_prime_tower_));
  _internal_metadata_.Clear();
}

const char* PrintTimeMaterialEstimates::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float time_none = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          time_none_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float time_inset_0 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          time_inset_0_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float time_inset_x = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          time_inset_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float time_skin = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          time_skin_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float time_support = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          time_support_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float time_skirt = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          time_skirt_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float time_infill = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          time_infill_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float time_support_infill = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          time_support_infill_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float time_travel = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          time_travel_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float time_retract = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          time_retract_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float time_support_interface = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          time_support_interface_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float time_prime_tower = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          time_prime_tower_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated .cura.proto.MaterialEstimates materialEstimates = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_materialestimates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PrintTimeMaterialEstimates::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cura.proto.PrintTimeMaterialEstimates)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float time_none = 1;
  if (!(this->time_none() <= 0 && this->time_none() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_time_none(), target);
  }

  // float time_inset_0 = 2;
  if (!(this->time_inset_0() <= 0 && this->time_inset_0() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_time_inset_0(), target);
  }

  // float time_inset_x = 3;
  if (!(this->time_inset_x() <= 0 && this->time_inset_x() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_time_inset_x(), target);
  }

  // float time_skin = 4;
  if (!(this->time_skin() <= 0 && this->time_skin() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_time_skin(), target);
  }

  // float time_support = 5;
  if (!(this->time_support() <= 0 && this->time_support() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_time_support(), target);
  }

  // float time_skirt = 6;
  if (!(this->time_skirt() <= 0 && this->time_skirt() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_time_skirt(), target);
  }

  // float time_infill = 7;
  if (!(this->time_infill() <= 0 && this->time_infill() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_time_infill(), target);
  }

  // float time_support_infill = 8;
  if (!(this->time_support_infill() <= 0 && this->time_support_infill() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_time_support_infill(), target);
  }

  // float time_travel = 9;
  if (!(this->time_travel() <= 0 && this->time_travel() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_time_travel(), target);
  }

  // float time_retract = 10;
  if (!(this->time_retract() <= 0 && this->time_retract() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_time_retract(), target);
  }

  // float time_support_interface = 11;
  if (!(this->time_support_interface() <= 0 && this->time_support_interface() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_time_support_interface(), target);
  }

  // float time_prime_tower = 12;
  if (!(this->time_prime_tower() <= 0 && this->time_prime_tower() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_time_prime_tower(), target);
  }

  // repeated .cura.proto.MaterialEstimates materialEstimates = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_materialestimates_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(13, this->_internal_materialestimates(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cura.proto.PrintTimeMaterialEstimates)
  return target;
}

size_t PrintTimeMaterialEstimates::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cura.proto.PrintTimeMaterialEstimates)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cura.proto.MaterialEstimates materialEstimates = 13;
  total_size += 1UL * this->_internal_materialestimates_size();
  for (const auto& msg : this->materialestimates_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // float time_none = 1;
  if (!(this->time_none() <= 0 && this->time_none() >= 0)) {
    total_size += 1 + 4;
  }

  // float time_inset_0 = 2;
  if (!(this->time_inset_0() <= 0 && this->time_inset_0() >= 0)) {
    total_size += 1 + 4;
  }

  // float time_inset_x = 3;
  if (!(this->time_inset_x() <= 0 && this->time_inset_x() >= 0)) {
    total_size += 1 + 4;
  }

  // float time_skin = 4;
  if (!(this->time_skin() <= 0 && this->time_skin() >= 0)) {
    total_size += 1 + 4;
  }

  // float time_support = 5;
  if (!(this->time_support() <= 0 && this->time_support() >= 0)) {
    total_size += 1 + 4;
  }

  // float time_skirt = 6;
  if (!(this->time_skirt() <= 0 && this->time_skirt() >= 0)) {
    total_size += 1 + 4;
  }

  // float time_infill = 7;
  if (!(this->time_infill() <= 0 && this->time_infill() >= 0)) {
    total_size += 1 + 4;
  }

  // float time_support_infill = 8;
  if (!(this->time_support_infill() <= 0 && this->time_support_infill() >= 0)) {
    total_size += 1 + 4;
  }

  // float time_travel = 9;
  if (!(this->time_travel() <= 0 && this->time_travel() >= 0)) {
    total_size += 1 + 4;
  }

  // float time_retract = 10;
  if (!(this->time_retract() <= 0 && this->time_retract() >= 0)) {
    total_size += 1 + 4;
  }

  // float time_support_interface = 11;
  if (!(this->time_support_interface() <= 0 && this->time_support_interface() >= 0)) {
    total_size += 1 + 4;
  }

  // float time_prime_tower = 12;
  if (!(this->time_prime_tower() <= 0 && this->time_prime_tower() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrintTimeMaterialEstimates::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cura.proto.PrintTimeMaterialEstimates)
  GOOGLE_DCHECK_NE(&from, this);
  const PrintTimeMaterialEstimates* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PrintTimeMaterialEstimates>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cura.proto.PrintTimeMaterialEstimates)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cura.proto.PrintTimeMaterialEstimates)
    MergeFrom(*source);
  }
}

void PrintTimeMaterialEstimates::MergeFrom(const PrintTimeMaterialEstimates& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cura.proto.PrintTimeMaterialEstimates)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  materialestimates_.MergeFrom(from.materialestimates_);
  if (!(from.time_none() <= 0 && from.time_none() >= 0)) {
    _internal_set_time_none(from._internal_time_none());
  }
  if (!(from.time_inset_0() <= 0 && from.time_inset_0() >= 0)) {
    _internal_set_time_inset_0(from._internal_time_inset_0());
  }
  if (!(from.time_inset_x() <= 0 && from.time_inset_x() >= 0)) {
    _internal_set_time_inset_x(from._internal_time_inset_x());
  }
  if (!(from.time_skin() <= 0 && from.time_skin() >= 0)) {
    _internal_set_time_skin(from._internal_time_skin());
  }
  if (!(from.time_support() <= 0 && from.time_support() >= 0)) {
    _internal_set_time_support(from._internal_time_support());
  }
  if (!(from.time_skirt() <= 0 && from.time_skirt() >= 0)) {
    _internal_set_time_skirt(from._internal_time_skirt());
  }
  if (!(from.time_infill() <= 0 && from.time_infill() >= 0)) {
    _internal_set_time_infill(from._internal_time_infill());
  }
  if (!(from.time_support_infill() <= 0 && from.time_support_infill() >= 0)) {
    _internal_set_time_support_infill(from._internal_time_support_infill());
  }
  if (!(from.time_travel() <= 0 && from.time_travel() >= 0)) {
    _internal_set_time_travel(from._internal_time_travel());
  }
  if (!(from.time_retract() <= 0 && from.time_retract() >= 0)) {
    _internal_set_time_retract(from._internal_time_retract());
  }
  if (!(from.time_support_interface() <= 0 && from.time_support_interface() >= 0)) {
    _internal_set_time_support_interface(from._internal_time_support_interface());
  }
  if (!(from.time_prime_tower() <= 0 && from.time_prime_tower() >= 0)) {
    _internal_set_time_prime_tower(from._internal_time_prime_tower());
  }
}

void PrintTimeMaterialEstimates::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cura.proto.PrintTimeMaterialEstimates)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrintTimeMaterialEstimates::CopyFrom(const PrintTimeMaterialEstimates& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cura.proto.PrintTimeMaterialEstimates)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrintTimeMaterialEstimates::IsInitialized() const {
  return true;
}

void PrintTimeMaterialEstimates::InternalSwap(PrintTimeMaterialEstimates* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  materialestimates_.InternalSwap(&other->materialestimates_);
  swap(time_none_, other->time_none_);
  swap(time_inset_0_, other->time_inset_0_);
  swap(time_inset_x_, other->time_inset_x_);
  swap(time_skin_, other->time_skin_);
  swap(time_support_, other->time_support_);
  swap(time_skirt_, other->time_skirt_);
  swap(time_infill_, other->time_infill_);
  swap(time_support_infill_, other->time_support_infill_);
  swap(time_travel_, other->time_travel_);
  swap(time_retract_, other->time_retract_);
  swap(time_support_interface_, other->time_support_interface_);
  swap(time_prime_tower_, other->time_prime_tower_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PrintTimeMaterialEstimates::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MaterialEstimates::InitAsDefaultInstance() {
}
class MaterialEstimates::_Internal {
 public:
};

MaterialEstimates::MaterialEstimates()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cura.proto.MaterialEstimates)
}
MaterialEstimates::MaterialEstimates(const MaterialEstimates& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&material_amount_) -
    reinterpret_cast<char*>(&id_)) + sizeof(material_amount_));
  // @@protoc_insertion_point(copy_constructor:cura.proto.MaterialEstimates)
}

void MaterialEstimates::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&material_amount_) -
      reinterpret_cast<char*>(&id_)) + sizeof(material_amount_));
}

MaterialEstimates::~MaterialEstimates() {
  // @@protoc_insertion_point(destructor:cura.proto.MaterialEstimates)
  SharedDtor();
}

void MaterialEstimates::SharedDtor() {
}

void MaterialEstimates::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MaterialEstimates& MaterialEstimates::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MaterialEstimates_Cura_2eproto.base);
  return *internal_default_instance();
}


void MaterialEstimates::Clear() {
// @@protoc_insertion_point(message_clear_start:cura.proto.MaterialEstimates)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&material_amount_) -
      reinterpret_cast<char*>(&id_)) + sizeof(material_amount_));
  _internal_metadata_.Clear();
}

const char* MaterialEstimates::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float material_amount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          material_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MaterialEstimates::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cura.proto.MaterialEstimates)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // float material_amount = 2;
  if (!(this->material_amount() <= 0 && this->material_amount() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_material_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cura.proto.MaterialEstimates)
  return target;
}

size_t MaterialEstimates::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cura.proto.MaterialEstimates)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  // float material_amount = 2;
  if (!(this->material_amount() <= 0 && this->material_amount() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MaterialEstimates::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cura.proto.MaterialEstimates)
  GOOGLE_DCHECK_NE(&from, this);
  const MaterialEstimates* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MaterialEstimates>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cura.proto.MaterialEstimates)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cura.proto.MaterialEstimates)
    MergeFrom(*source);
  }
}

void MaterialEstimates::MergeFrom(const MaterialEstimates& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cura.proto.MaterialEstimates)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (!(from.material_amount() <= 0 && from.material_amount() >= 0)) {
    _internal_set_material_amount(from._internal_material_amount());
  }
}

void MaterialEstimates::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cura.proto.MaterialEstimates)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MaterialEstimates::CopyFrom(const MaterialEstimates& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cura.proto.MaterialEstimates)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaterialEstimates::IsInitialized() const {
  return true;
}

void MaterialEstimates::InternalSwap(MaterialEstimates* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
  swap(material_amount_, other->material_amount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MaterialEstimates::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SettingList::InitAsDefaultInstance() {
}
class SettingList::_Internal {
 public:
};

SettingList::SettingList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cura.proto.SettingList)
}
SettingList::SettingList(const SettingList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      settings_(from.settings_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cura.proto.SettingList)
}

void SettingList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SettingList_Cura_2eproto.base);
}

SettingList::~SettingList() {
  // @@protoc_insertion_point(destructor:cura.proto.SettingList)
  SharedDtor();
}

void SettingList::SharedDtor() {
}

void SettingList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SettingList& SettingList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SettingList_Cura_2eproto.base);
  return *internal_default_instance();
}


void SettingList::Clear() {
// @@protoc_insertion_point(message_clear_start:cura.proto.SettingList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  settings_.Clear();
  _internal_metadata_.Clear();
}

const char* SettingList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .cura.proto.Setting settings = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_settings(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SettingList::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cura.proto.SettingList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cura.proto.Setting settings = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_settings_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_settings(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cura.proto.SettingList)
  return target;
}

size_t SettingList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cura.proto.SettingList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cura.proto.Setting settings = 1;
  total_size += 1UL * this->_internal_settings_size();
  for (const auto& msg : this->settings_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SettingList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cura.proto.SettingList)
  GOOGLE_DCHECK_NE(&from, this);
  const SettingList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SettingList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cura.proto.SettingList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cura.proto.SettingList)
    MergeFrom(*source);
  }
}

void SettingList::MergeFrom(const SettingList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cura.proto.SettingList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  settings_.MergeFrom(from.settings_);
}

void SettingList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cura.proto.SettingList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SettingList::CopyFrom(const SettingList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cura.proto.SettingList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SettingList::IsInitialized() const {
  return true;
}

void SettingList::InternalSwap(SettingList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  settings_.InternalSwap(&other->settings_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SettingList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Setting::InitAsDefaultInstance() {
}
class Setting::_Internal {
 public:
};

Setting::Setting()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cura.proto.Setting)
}
Setting::Setting(const Setting& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:cura.proto.Setting)
}

void Setting::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Setting_Cura_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Setting::~Setting() {
  // @@protoc_insertion_point(destructor:cura.proto.Setting)
  SharedDtor();
}

void Setting::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Setting::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Setting& Setting::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Setting_Cura_2eproto.base);
  return *internal_default_instance();
}


void Setting::Clear() {
// @@protoc_insertion_point(message_clear_start:cura.proto.Setting)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* Setting::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_name(), ptr, ctx, "cura.proto.Setting.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_value(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Setting::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cura.proto.Setting)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cura.proto.Setting.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // bytes value = 2;
  if (this->value().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cura.proto.Setting)
  return target;
}

size_t Setting::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cura.proto.Setting)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // bytes value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Setting::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cura.proto.Setting)
  GOOGLE_DCHECK_NE(&from, this);
  const Setting* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Setting>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cura.proto.Setting)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cura.proto.Setting)
    MergeFrom(*source);
  }
}

void Setting::MergeFrom(const Setting& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cura.proto.Setting)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void Setting::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cura.proto.Setting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Setting::CopyFrom(const Setting& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cura.proto.Setting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Setting::IsInitialized() const {
  return true;
}

void Setting::InternalSwap(Setting* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata Setting::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SettingExtruder::InitAsDefaultInstance() {
}
class SettingExtruder::_Internal {
 public:
};

SettingExtruder::SettingExtruder()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cura.proto.SettingExtruder)
}
SettingExtruder::SettingExtruder(const SettingExtruder& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  extruder_ = from.extruder_;
  // @@protoc_insertion_point(copy_constructor:cura.proto.SettingExtruder)
}

void SettingExtruder::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SettingExtruder_Cura_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  extruder_ = 0;
}

SettingExtruder::~SettingExtruder() {
  // @@protoc_insertion_point(destructor:cura.proto.SettingExtruder)
  SharedDtor();
}

void SettingExtruder::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SettingExtruder::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SettingExtruder& SettingExtruder::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SettingExtruder_Cura_2eproto.base);
  return *internal_default_instance();
}


void SettingExtruder::Clear() {
// @@protoc_insertion_point(message_clear_start:cura.proto.SettingExtruder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  extruder_ = 0;
  _internal_metadata_.Clear();
}

const char* SettingExtruder::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_name(), ptr, ctx, "cura.proto.SettingExtruder.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 extruder = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          extruder_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SettingExtruder::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cura.proto.SettingExtruder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cura.proto.SettingExtruder.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // int32 extruder = 2;
  if (this->extruder() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_extruder(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cura.proto.SettingExtruder)
  return target;
}

size_t SettingExtruder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cura.proto.SettingExtruder)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int32 extruder = 2;
  if (this->extruder() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_extruder());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SettingExtruder::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cura.proto.SettingExtruder)
  GOOGLE_DCHECK_NE(&from, this);
  const SettingExtruder* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SettingExtruder>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cura.proto.SettingExtruder)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cura.proto.SettingExtruder)
    MergeFrom(*source);
  }
}

void SettingExtruder::MergeFrom(const SettingExtruder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cura.proto.SettingExtruder)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.extruder() != 0) {
    _internal_set_extruder(from._internal_extruder());
  }
}

void SettingExtruder::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cura.proto.SettingExtruder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SettingExtruder::CopyFrom(const SettingExtruder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cura.proto.SettingExtruder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SettingExtruder::IsInitialized() const {
  return true;
}

void SettingExtruder::InternalSwap(SettingExtruder* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(extruder_, other->extruder_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SettingExtruder::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GCodePrefix::InitAsDefaultInstance() {
}
class GCodePrefix::_Internal {
 public:
};

GCodePrefix::GCodePrefix()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cura.proto.GCodePrefix)
}
GCodePrefix::GCodePrefix(const GCodePrefix& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  // @@protoc_insertion_point(copy_constructor:cura.proto.GCodePrefix)
}

void GCodePrefix::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GCodePrefix_Cura_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GCodePrefix::~GCodePrefix() {
  // @@protoc_insertion_point(destructor:cura.proto.GCodePrefix)
  SharedDtor();
}

void GCodePrefix::SharedDtor() {
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GCodePrefix::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GCodePrefix& GCodePrefix::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GCodePrefix_Cura_2eproto.base);
  return *internal_default_instance();
}


void GCodePrefix::Clear() {
// @@protoc_insertion_point(message_clear_start:cura.proto.GCodePrefix)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* GCodePrefix::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GCodePrefix::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cura.proto.GCodePrefix)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 2;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cura.proto.GCodePrefix)
  return target;
}

size_t GCodePrefix::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cura.proto.GCodePrefix)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GCodePrefix::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cura.proto.GCodePrefix)
  GOOGLE_DCHECK_NE(&from, this);
  const GCodePrefix* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GCodePrefix>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cura.proto.GCodePrefix)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cura.proto.GCodePrefix)
    MergeFrom(*source);
  }
}

void GCodePrefix::MergeFrom(const GCodePrefix& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cura.proto.GCodePrefix)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
}

void GCodePrefix::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cura.proto.GCodePrefix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCodePrefix::CopyFrom(const GCodePrefix& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cura.proto.GCodePrefix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCodePrefix::IsInitialized() const {
  return true;
}

void GCodePrefix::InternalSwap(GCodePrefix* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata GCodePrefix::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SlicingFinished::InitAsDefaultInstance() {
}
class SlicingFinished::_Internal {
 public:
};

SlicingFinished::SlicingFinished()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cura.proto.SlicingFinished)
}
SlicingFinished::SlicingFinished(const SlicingFinished& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cura.proto.SlicingFinished)
}

void SlicingFinished::SharedCtor() {
}

SlicingFinished::~SlicingFinished() {
  // @@protoc_insertion_point(destructor:cura.proto.SlicingFinished)
  SharedDtor();
}

void SlicingFinished::SharedDtor() {
}

void SlicingFinished::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SlicingFinished& SlicingFinished::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SlicingFinished_Cura_2eproto.base);
  return *internal_default_instance();
}


void SlicingFinished::Clear() {
// @@protoc_insertion_point(message_clear_start:cura.proto.SlicingFinished)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* SlicingFinished::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SlicingFinished::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cura.proto.SlicingFinished)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cura.proto.SlicingFinished)
  return target;
}

size_t SlicingFinished::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cura.proto.SlicingFinished)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SlicingFinished::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cura.proto.SlicingFinished)
  GOOGLE_DCHECK_NE(&from, this);
  const SlicingFinished* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SlicingFinished>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cura.proto.SlicingFinished)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cura.proto.SlicingFinished)
    MergeFrom(*source);
  }
}

void SlicingFinished::MergeFrom(const SlicingFinished& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cura.proto.SlicingFinished)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SlicingFinished::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cura.proto.SlicingFinished)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SlicingFinished::CopyFrom(const SlicingFinished& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cura.proto.SlicingFinished)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SlicingFinished::IsInitialized() const {
  return true;
}

void SlicingFinished::InternalSwap(SlicingFinished* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SlicingFinished::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace cura
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cura::proto::ObjectList* Arena::CreateMaybeMessage< ::cura::proto::ObjectList >(Arena* arena) {
  return Arena::CreateInternal< ::cura::proto::ObjectList >(arena);
}
template<> PROTOBUF_NOINLINE ::cura::proto::Slice* Arena::CreateMaybeMessage< ::cura::proto::Slice >(Arena* arena) {
  return Arena::CreateInternal< ::cura::proto::Slice >(arena);
}
template<> PROTOBUF_NOINLINE ::cura::proto::Extruder* Arena::CreateMaybeMessage< ::cura::proto::Extruder >(Arena* arena) {
  return Arena::CreateInternal< ::cura::proto::Extruder >(arena);
}
template<> PROTOBUF_NOINLINE ::cura::proto::Object* Arena::CreateMaybeMessage< ::cura::proto::Object >(Arena* arena) {
  return Arena::CreateInternal< ::cura::proto::Object >(arena);
}
template<> PROTOBUF_NOINLINE ::cura::proto::Progress* Arena::CreateMaybeMessage< ::cura::proto::Progress >(Arena* arena) {
  return Arena::CreateInternal< ::cura::proto::Progress >(arena);
}
template<> PROTOBUF_NOINLINE ::cura::proto::Layer* Arena::CreateMaybeMessage< ::cura::proto::Layer >(Arena* arena) {
  return Arena::CreateInternal< ::cura::proto::Layer >(arena);
}
template<> PROTOBUF_NOINLINE ::cura::proto::Polygon* Arena::CreateMaybeMessage< ::cura::proto::Polygon >(Arena* arena) {
  return Arena::CreateInternal< ::cura::proto::Polygon >(arena);
}
template<> PROTOBUF_NOINLINE ::cura::proto::LayerOptimized* Arena::CreateMaybeMessage< ::cura::proto::LayerOptimized >(Arena* arena) {
  return Arena::CreateInternal< ::cura::proto::LayerOptimized >(arena);
}
template<> PROTOBUF_NOINLINE ::cura::proto::PathSegment* Arena::CreateMaybeMessage< ::cura::proto::PathSegment >(Arena* arena) {
  return Arena::CreateInternal< ::cura::proto::PathSegment >(arena);
}
template<> PROTOBUF_NOINLINE ::cura::proto::GCodeLayer* Arena::CreateMaybeMessage< ::cura::proto::GCodeLayer >(Arena* arena) {
  return Arena::CreateInternal< ::cura::proto::GCodeLayer >(arena);
}
template<> PROTOBUF_NOINLINE ::cura::proto::PrintTimeMaterialEstimates* Arena::CreateMaybeMessage< ::cura::proto::PrintTimeMaterialEstimates >(Arena* arena) {
  return Arena::CreateInternal< ::cura::proto::PrintTimeMaterialEstimates >(arena);
}
template<> PROTOBUF_NOINLINE ::cura::proto::MaterialEstimates* Arena::CreateMaybeMessage< ::cura::proto::MaterialEstimates >(Arena* arena) {
  return Arena::CreateInternal< ::cura::proto::MaterialEstimates >(arena);
}
template<> PROTOBUF_NOINLINE ::cura::proto::SettingList* Arena::CreateMaybeMessage< ::cura::proto::SettingList >(Arena* arena) {
  return Arena::CreateInternal< ::cura::proto::SettingList >(arena);
}
template<> PROTOBUF_NOINLINE ::cura::proto::Setting* Arena::CreateMaybeMessage< ::cura::proto::Setting >(Arena* arena) {
  return Arena::CreateInternal< ::cura::proto::Setting >(arena);
}
template<> PROTOBUF_NOINLINE ::cura::proto::SettingExtruder* Arena::CreateMaybeMessage< ::cura::proto::SettingExtruder >(Arena* arena) {
  return Arena::CreateInternal< ::cura::proto::SettingExtruder >(arena);
}
template<> PROTOBUF_NOINLINE ::cura::proto::GCodePrefix* Arena::CreateMaybeMessage< ::cura::proto::GCodePrefix >(Arena* arena) {
  return Arena::CreateInternal< ::cura::proto::GCodePrefix >(arena);
}
template<> PROTOBUF_NOINLINE ::cura::proto::SlicingFinished* Arena::CreateMaybeMessage< ::cura::proto::SlicingFinished >(Arena* arena) {
  return Arena::CreateInternal< ::cura::proto::SlicingFinished >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
