/*
 * Module code.
 *
 * Generated by SIP 4.19.19
 */

#include "sipAPISavitar.h"

#line 22 "/home/tiao/git_ws/moveo_moveit_ws/src/Cura/libSavitar/python/SceneNode.sip"
    #include "SceneNode.h"
#line 12 "/home/tiao/git_ws/moveo_moveit_ws/src/Cura/libSavitar/build/python/sipSavitarpart0.cpp"
#line 22 "/home/tiao/git_ws/moveo_moveit_ws/src/Cura/libSavitar/python/Scene.sip"
    #include "Scene.h"
#line 15 "/home/tiao/git_ws/moveo_moveit_ws/src/Cura/libSavitar/build/python/sipSavitarpart0.cpp"
#line 22 "/home/tiao/git_ws/moveo_moveit_ws/src/Cura/libSavitar/python/MeshData.sip"
    #include "MeshData.h"
#line 18 "/home/tiao/git_ws/moveo_moveit_ws/src/Cura/libSavitar/build/python/sipSavitarpart0.cpp"
#line 34 "/home/tiao/git_ws/moveo_moveit_ws/src/Cura/libSavitar/python/ThreeMFParser.sip"
    #include "ThreeMFParser.h"
#line 21 "/home/tiao/git_ws/moveo_moveit_ws/src/Cura/libSavitar/build/python/sipSavitarpart0.cpp"

/* Define the strings used by this module. */
const char sipStrings_Savitar[] = {
    's', 't', 'd', ':', ':', 'm', 'a', 'p', '<', 's', 't', 'd', ':', ':', 's', 't', 'r', 'i', 'n', 'g', ',', 's', 't', 'd', ':', ':', 's', 't', 'r', 'i', 'n', 'g', '>', 0,
    's', 't', 'd', ':', ':', 'v', 'e', 'c', 't', 'o', 'r', '<', 'S', 'c', 'e', 'n', 'e', 'N', 'o', 'd', 'e', '*', '>', 0,
    'g', 'e', 't', 'F', 'l', 'a', 't', 'V', 'e', 'r', 't', 'i', 'c', 'e', 's', 'A', 's', 'B', 'y', 't', 'e', 's', 0,
    's', 'e', 't', 'V', 'e', 'r', 't', 'i', 'c', 'e', 's', 'F', 'r', 'o', 'm', 'B', 'y', 't', 'e', 's', 0,
    'g', 'e', 't', 'V', 'e', 'r', 't', 'i', 'c', 'e', 's', 'A', 's', 'B', 'y', 't', 'e', 's', 0,
    's', 'e', 't', 'F', 'a', 'c', 'e', 's', 'F', 'r', 'o', 'm', 'B', 'y', 't', 'e', 's', 0,
    's', 'e', 't', 'T', 'r', 'a', 'n', 's', 'f', 'o', 'r', 'm', 'a', 't', 'i', 'o', 'n', 0,
    'g', 'e', 't', 'T', 'r', 'a', 'n', 's', 'f', 'o', 'r', 'm', 'a', 't', 'i', 'o', 'n', 0,
    'g', 'e', 't', 'A', 'l', 'l', 'S', 'c', 'e', 'n', 'e', 'N', 'o', 'd', 'e', 's', 0,
    'g', 'e', 't', 'F', 'a', 'c', 'e', 's', 'A', 's', 'B', 'y', 't', 'e', 's', 0,
    's', 'c', 'e', 'n', 'e', 'T', 'o', 'S', 't', 'r', 'i', 'n', 'g', 0,
    'T', 'h', 'r', 'e', 'e', 'M', 'F', 'P', 'a', 'r', 's', 'e', 'r', 0,
    'g', 'e', 't', 'S', 'c', 'e', 'n', 'e', 'N', 'o', 'd', 'e', 's', 0,
    'a', 'd', 'd', 'S', 'c', 'e', 'n', 'e', 'N', 'o', 'd', 'e', 0,
    'g', 'e', 't', 'M', 'e', 't', 'a', 'd', 'a', 't', 'a', 0,
    'g', 'e', 't', 'S', 'e', 't', 't', 'i', 'n', 'g', 's', 0,
    'g', 'e', 't', 'C', 'h', 'i', 'l', 'd', 'r', 'e', 'n', 0,
    'g', 'e', 't', 'M', 'e', 's', 'h', 'D', 'a', 't', 'a', 0,
    's', 't', 'd', ':', ':', 's', 't', 'r', 'i', 'n', 'g', 0,
    's', 'e', 't', 'S', 'e', 't', 't', 'i', 'n', 'g', 0,
    'b', 'y', 't', 'e', 'a', 'r', 'r', 'a', 'y', 0,
    'a', 'd', 'd', 'C', 'h', 'i', 'l', 'd', 0,
    's', 'e', 't', 'U', 'n', 'i', 't', 0,
    'g', 'e', 't', 'U', 'n', 'i', 't', 0,
    'S', 'a', 'v', 'i', 't', 'a', 'r', 0,
    'p', 'a', 'r', 's', 'e', 0,
    'S', 'c', 'e', 'n', 'e', 0,
};


/*
 * This defines each type in this module.
 */
sipTypeDef *sipExportedTypes_Savitar[] = {
    &sipTypeDef_Savitar_MeshData.ctd_base,
    &sipTypeDef_Savitar_Scene.ctd_base,
    &sipTypeDef_Savitar_SceneNode.ctd_base,
    &sipTypeDef_Savitar_ThreeMFParser.ctd_base,
    &sipTypeDef_Savitar_bytearray.mtd_base,
    &sipTypeDef_Savitar_std_map_0100std_string_0100std_string.mtd_base,
    &sipTypeDef_Savitar_std_string.mtd_base,
    &sipTypeDef_Savitar_std_vector_0101SceneNode.mtd_base,
};


/* This defines this module. */
sipExportedModuleDef sipModuleAPI_Savitar = {
    0,
    SIP_API_MINOR_NR,
    sipNameNr_Savitar,
    0,
    sipStrings_Savitar,
    SIP_NULLPTR,
    SIP_NULLPTR,
    8,
    sipExportedTypes_Savitar,
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};


/* The SIP API and the APIs of any imported modules. */
const sipAPIDef *sipAPI_Savitar;


/* The Python module initialisation function. */
#if PY_MAJOR_VERSION >= 3
#define SIP_MODULE_ENTRY        PyInit_Savitar
#define SIP_MODULE_TYPE         PyObject *
#define SIP_MODULE_DISCARD(r)   Py_DECREF(r)
#define SIP_MODULE_RETURN(r)    return (r)
#else
#define SIP_MODULE_ENTRY        initSavitar
#define SIP_MODULE_TYPE         void
#define SIP_MODULE_DISCARD(r)
#define SIP_MODULE_RETURN(r)    return
#endif

#if defined(SIP_STATIC_MODULE)
extern "C" SIP_MODULE_TYPE SIP_MODULE_ENTRY()
#else
PyMODINIT_FUNC SIP_MODULE_ENTRY()
#endif
{
    static PyMethodDef sip_methods[] = {
        {SIP_NULLPTR, SIP_NULLPTR, 0, SIP_NULLPTR}
    };

#if PY_MAJOR_VERSION >= 3
    static PyModuleDef sip_module_def = {
        PyModuleDef_HEAD_INIT,
        "Savitar",
        SIP_NULLPTR,
        -1,
        sip_methods,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_NULLPTR
    };
#endif

    PyObject *sipModule, *sipModuleDict;
    PyObject *sip_sipmod, *sip_capiobj;

    /* Initialise the module and get it's dictionary. */
#if PY_MAJOR_VERSION >= 3
    sipModule = PyModule_Create(&sip_module_def);
#elif PY_VERSION_HEX >= 0x02050000
    sipModule = Py_InitModule(sipName_Savitar, sip_methods);
#else
    sipModule = Py_InitModule(const_cast<char *>(sipName_Savitar), sip_methods);
#endif

    if (sipModule == SIP_NULLPTR)
        SIP_MODULE_RETURN(SIP_NULLPTR);

    sipModuleDict = PyModule_GetDict(sipModule);

    /* Get the SIP module's API. */
#if PY_VERSION_HEX >= 0x02050000
    sip_sipmod = PyImport_ImportModule("sip");
#else
    sip_sipmod = PyImport_ImportModule(const_cast<char *>("sip"));
#endif

    if (sip_sipmod == SIP_NULLPTR)
    {
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(SIP_NULLPTR);
    }

    sip_capiobj = PyDict_GetItemString(PyModule_GetDict(sip_sipmod), "_C_API");
    Py_DECREF(sip_sipmod);

#if defined(SIP_USE_PYCAPSULE)
    if (sip_capiobj == SIP_NULLPTR || !PyCapsule_CheckExact(sip_capiobj))
#else
    if (sip_capiobj == SIP_NULLPTR || !PyCObject_Check(sip_capiobj))
#endif
    {
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(SIP_NULLPTR);
    }

#if defined(SIP_USE_PYCAPSULE)
    sipAPI_Savitar = reinterpret_cast<const sipAPIDef *>(PyCapsule_GetPointer(sip_capiobj, "sip._C_API"));
#else
    sipAPI_Savitar = reinterpret_cast<const sipAPIDef *>(PyCObject_AsVoidPtr(sip_capiobj));
#endif

#if defined(SIP_USE_PYCAPSULE)
    if (sipAPI_Savitar == SIP_NULLPTR)
    {
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(SIP_NULLPTR);
    }
#endif

    /* Export the module and publish it's API. */
    if (sipExportModule(&sipModuleAPI_Savitar,SIP_API_MAJOR_NR,SIP_API_MINOR_NR,0) < 0)
    {
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(SIP_NULLPTR);
    }
    /* Initialise the module now all its dependencies have been set up. */
    if (sipInitModule(&sipModuleAPI_Savitar,sipModuleDict) < 0)
    {
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(SIP_NULLPTR);
    }

    SIP_MODULE_RETURN(sipModule);
}

#line 34 "/home/tiao/git_ws/moveo_moveit_ws/src/Cura/libSavitar/python/ThreeMFParser.sip"
    #include "ThreeMFParser.h"
#line 216 "/home/tiao/git_ws/moveo_moveit_ws/src/Cura/libSavitar/build/python/sipSavitarpart0.cpp"

#line 27 "/home/tiao/git_ws/moveo_moveit_ws/src/Cura/libSavitar/python/Types.sip"
    #include <string>
#line 220 "/home/tiao/git_ws/moveo_moveit_ws/src/Cura/libSavitar/build/python/sipSavitarpart0.cpp"
#line 22 "/home/tiao/git_ws/moveo_moveit_ws/src/Cura/libSavitar/python/Scene.sip"
    #include "Scene.h"
#line 223 "/home/tiao/git_ws/moveo_moveit_ws/src/Cura/libSavitar/build/python/sipSavitarpart0.cpp"


class sipThreeMFParser : public  ::ThreeMFParser
{
public:
    sipThreeMFParser();
    sipThreeMFParser(const  ::ThreeMFParser&);
    ~sipThreeMFParser();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipThreeMFParser(const sipThreeMFParser &);
    sipThreeMFParser &operator = (const sipThreeMFParser &);
};

sipThreeMFParser::sipThreeMFParser():  ::ThreeMFParser(), sipPySelf(SIP_NULLPTR)
{
}

sipThreeMFParser::sipThreeMFParser(const  ::ThreeMFParser& a0):  ::ThreeMFParser(a0), sipPySelf(SIP_NULLPTR)
{
}

sipThreeMFParser::~sipThreeMFParser()
{
    sipInstanceDestroyedEx(&sipPySelf);
}


extern "C" {static PyObject *meth_ThreeMFParser_parse(PyObject *, PyObject *);}
static PyObject *meth_ThreeMFParser_parse(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::std::string* a0;
        int a0State = 0;
         ::ThreeMFParser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_ThreeMFParser, &sipCpp, sipType_std_string,&a0, &a0State))
        {
             ::Scene*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::Scene(sipCpp->parse(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_std_string,a0State);

            return sipConvertFromNewType(sipRes,sipType_Scene,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ThreeMFParser, sipName_parse, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_ThreeMFParser_sceneToString(PyObject *, PyObject *);}
static PyObject *meth_ThreeMFParser_sceneToString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Scene* a0;
         ::ThreeMFParser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_ThreeMFParser, &sipCpp, sipType_Scene, &a0))
        {
             ::std::string*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::std::string(sipCpp->sceneToString(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_std_string,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ThreeMFParser, sipName_sceneToString, SIP_NULLPTR);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_ThreeMFParser(void *, int);}
static void release_ThreeMFParser(void *sipCppV, int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipThreeMFParser *>(sipCppV);
    else
        delete reinterpret_cast< ::ThreeMFParser *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void assign_ThreeMFParser(void *, SIP_SSIZE_T, void *);}
static void assign_ThreeMFParser(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::ThreeMFParser *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::ThreeMFParser *>(sipSrc);
}


extern "C" {static void *array_ThreeMFParser(SIP_SSIZE_T);}
static void *array_ThreeMFParser(SIP_SSIZE_T sipNrElem)
{
    return new  ::ThreeMFParser[sipNrElem];
}


extern "C" {static void *copy_ThreeMFParser(const void *, SIP_SSIZE_T);}
static void *copy_ThreeMFParser(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::ThreeMFParser(reinterpret_cast<const  ::ThreeMFParser *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_ThreeMFParser(sipSimpleWrapper *);}
static void dealloc_ThreeMFParser(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipThreeMFParser *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_ThreeMFParser(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_ThreeMFParser(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_ThreeMFParser(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipThreeMFParser *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipThreeMFParser();
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::ThreeMFParser* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_ThreeMFParser, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipThreeMFParser(*a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_ThreeMFParser[] = {
    {SIP_MLNAME_CAST(sipName_parse), meth_ThreeMFParser_parse, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_sceneToString), meth_ThreeMFParser_sceneToString, METH_VARARGS, SIP_NULLPTR}
};


sipClassTypeDef sipTypeDef_Savitar_ThreeMFParser = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_ThreeMFParser,
        {SIP_NULLPTR},
        SIP_NULLPTR
    },
    {
        sipNameNr_ThreeMFParser,
        {0, 0, 1},
        2, methods_ThreeMFParser,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    SIP_NULLPTR,
    -1,
    -1,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_ThreeMFParser,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_ThreeMFParser,
    assign_ThreeMFParser,
    array_ThreeMFParser,
    copy_ThreeMFParser,
    release_ThreeMFParser,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
