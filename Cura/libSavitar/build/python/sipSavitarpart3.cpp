/*
 * Module code.
 *
 * Generated by SIP 4.19.19
 */

#include "sipAPISavitar.h"

#line 174 "/home/tiao/git_ws/moveo_moveit_ws/src/Cura/libSavitar/python/Types.sip"
    #include <vector>
    #include <cstdint>
    #include "Types.h"
#line 14 "/home/tiao/git_ws/moveo_moveit_ws/src/Cura/libSavitar/build/python/sipSavitarpart3.cpp"



extern "C" {static void assign_bytearray(void *, SIP_SSIZE_T, void *);}
static void assign_bytearray(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::bytearray *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::bytearray *>(sipSrc);
}


extern "C" {static void *array_bytearray(SIP_SSIZE_T);}
static void *array_bytearray(SIP_SSIZE_T sipNrElem)
{
    return new  ::bytearray[sipNrElem];
}


extern "C" {static void *copy_bytearray(const void *, SIP_SSIZE_T);}
static void *copy_bytearray(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::bytearray(reinterpret_cast<const  ::bytearray *>(sipSrc)[sipSrcIdx]);
}


/* Call the mapped type's destructor. */
extern "C" {static void release_bytearray(void *, int);}
static void release_bytearray(void *ptr, int)
{
    Py_BEGIN_ALLOW_THREADS
    delete reinterpret_cast< ::bytearray *>(ptr);
    Py_END_ALLOW_THREADS
}



extern "C" {static int convertTo_bytearray(PyObject *, void **, int *, PyObject *);}
static int convertTo_bytearray(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *)
{
     ::bytearray **sipCppPtr = reinterpret_cast< ::bytearray **>(sipCppPtrV);

#line 184 "/home/tiao/git_ws/moveo_moveit_ws/src/Cura/libSavitar/python/Types.sip"
        if (sipIsErr == NULL)
        {
            return (PyBytes_Check(sipPy));
        }

        if (sipPy == Py_None)
        {
            *sipCppPtr = new bytearray;
            return 1;
        }

        if (PyBytes_Check(sipPy))
        {
            uint8_t *buffer = reinterpret_cast<uint8_t *>(PyBytes_AS_STRING(sipPy));
            *sipCppPtr = new bytearray(buffer, buffer + PyBytes_GET_SIZE(sipPy));
            return 1;
        }
        return 0;
#line 74 "/home/tiao/git_ws/moveo_moveit_ws/src/Cura/libSavitar/build/python/sipSavitarpart3.cpp"
}


extern "C" {static PyObject *convertFrom_bytearray(void *, PyObject *);}
static PyObject *convertFrom_bytearray(void *sipCppV, PyObject *)
{
    ::bytearray *sipCpp = reinterpret_cast< ::bytearray *>(sipCppV);

#line 180 "/home/tiao/git_ws/moveo_moveit_ws/src/Cura/libSavitar/python/Types.sip"
        return PyBytes_FromStringAndSize(reinterpret_cast<const char *>(sipCpp->data()), sipCpp->size());
#line 85 "/home/tiao/git_ws/moveo_moveit_ws/src/Cura/libSavitar/build/python/sipSavitarpart3.cpp"
}


sipMappedTypeDef sipTypeDef_Savitar_bytearray = {
    {
        -1,
        SIP_NULLPTR,
        0,
        SIP_TYPE_MAPPED,
        sipNameNr_bytearray,     /* bytearray */
        {0},
        0
    },
    {
        -1,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    },
    assign_bytearray,
    array_bytearray,
    copy_bytearray,
    release_bytearray,
    convertTo_bytearray,
    convertFrom_bytearray
};

#line 80 "/home/tiao/git_ws/moveo_moveit_ws/src/Cura/libSavitar/python/Types.sip"
    #include <vector>
#line 117 "/home/tiao/git_ws/moveo_moveit_ws/src/Cura/libSavitar/build/python/sipSavitarpart3.cpp"

#line 22 "/home/tiao/git_ws/moveo_moveit_ws/src/Cura/libSavitar/python/SceneNode.sip"
    #include "SceneNode.h"
#line 121 "/home/tiao/git_ws/moveo_moveit_ws/src/Cura/libSavitar/build/python/sipSavitarpart3.cpp"


extern "C" {static void assign_std_vector_0101SceneNode(void *, SIP_SSIZE_T, void *);}
static void assign_std_vector_0101SceneNode(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::std::vector< ::SceneNode*> *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::std::vector< ::SceneNode*> *>(sipSrc);
}


extern "C" {static void *array_std_vector_0101SceneNode(SIP_SSIZE_T);}
static void *array_std_vector_0101SceneNode(SIP_SSIZE_T sipNrElem)
{
    return new  ::std::vector< ::SceneNode*>[sipNrElem];
}


extern "C" {static void *copy_std_vector_0101SceneNode(const void *, SIP_SSIZE_T);}
static void *copy_std_vector_0101SceneNode(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::std::vector< ::SceneNode*>(reinterpret_cast<const  ::std::vector< ::SceneNode*> *>(sipSrc)[sipSrcIdx]);
}


/* Call the mapped type's destructor. */
extern "C" {static void release_std_vector_0101SceneNode(void *, int);}
static void release_std_vector_0101SceneNode(void *ptr, int)
{
    Py_BEGIN_ALLOW_THREADS
    delete reinterpret_cast< ::std::vector< ::SceneNode*> *>(ptr);
    Py_END_ALLOW_THREADS
}



extern "C" {static int convertTo_std_vector_0101SceneNode(PyObject *, void **, int *, PyObject *);}
static int convertTo_std_vector_0101SceneNode(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::std::vector< ::SceneNode*> **sipCppPtr = reinterpret_cast< ::std::vector< ::SceneNode*> **>(sipCppPtrV);

#line 117 "/home/tiao/git_ws/moveo_moveit_ws/src/Cura/libSavitar/python/Types.sip"
        // Check if type is compatible
        if (!sipIsErr)
        {
            // Must be any iterable
            PyObject *i = PyObject_GetIter(sipPy);
            bool iterable = (i != NULL);
            Py_XDECREF(i);
            return iterable;
        }

        // Iterate over the object
        PyObject *iterator = PyObject_GetIter(sipPy);
        PyObject *item;

        std::vector<SceneNode*> *result_vector = new std::vector<SceneNode*>();

        while ((item = PyIter_Next(iterator)))
        {
            if (!sipCanConvertToInstance(item, sipClass_SceneNode, SIP_NOT_NONE))
            {
                PyErr_Format(PyExc_TypeError, "object in iterable cannot be converted to SceneNode");
                *sipIsErr = 1;
                break;
            }

            int state;
            SceneNode* p = reinterpret_cast<SceneNode*>(sipConvertToInstance(item, sipClass_SceneNode, 0, SIP_NOT_NONE, &state, sipIsErr));

            if (!*sipIsErr)
            {
                result_vector->push_back(p);
            }

            sipReleaseInstance(p, sipClass_SceneNode, state);
            Py_DECREF(item);
        }

        Py_DECREF(iterator);

        if (*sipIsErr)
        {
            delete result_vector;
            return 0;
        }

        *sipCppPtr = result_vector;
        return sipGetState(sipTransferObj);
#line 209 "/home/tiao/git_ws/moveo_moveit_ws/src/Cura/libSavitar/build/python/sipSavitarpart3.cpp"
}


extern "C" {static PyObject *convertFrom_std_vector_0101SceneNode(void *, PyObject *);}
static PyObject *convertFrom_std_vector_0101SceneNode(void *sipCppV, PyObject *sipTransferObj)
{
    ::std::vector< ::SceneNode*> *sipCpp = reinterpret_cast< ::std::vector< ::SceneNode*> *>(sipCppV);

#line 84 "/home/tiao/git_ws/moveo_moveit_ws/src/Cura/libSavitar/python/Types.sip"
        PyObject *result_list = PyList_New(sipCpp -> size());

        // Create the Python list of the correct length.
        if (!result_list)
        {
            return NULL;
        }

        // Go through each element in the C++ instance and convert it to a
        // wrapped P2d.
        for (int i = 0; i < (int)sipCpp->size(); ++i)
        {
            SceneNode *cpp = new SceneNode(*sipCpp->at(i));
            PyObject *pobj = sipConvertFromInstance(cpp, sipClass_SceneNode, sipTransferObj);

            // Get the Python wrapper for the Type instance, creating a new
            // one if necessary, and handle any ownership transfer.
            if (!pobj)
            {
                // There was an error so garbage collect the Python list.
                Py_DECREF(result_list);
                return NULL;
            }

            // Add the wrapper to the list.
            PyList_SET_ITEM(result_list, i, pobj);
        }

        // Return the Python list.
        return result_list;
#line 249 "/home/tiao/git_ws/moveo_moveit_ws/src/Cura/libSavitar/build/python/sipSavitarpart3.cpp"
}


sipMappedTypeDef sipTypeDef_Savitar_std_vector_0101SceneNode = {
    {
        -1,
        SIP_NULLPTR,
        0,
        SIP_TYPE_MAPPED,
        sipNameNr_34,     /* std::vector<SceneNode*> */
        {0},
        0
    },
    {
        -1,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    },
    assign_std_vector_0101SceneNode,
    array_std_vector_0101SceneNode,
    copy_std_vector_0101SceneNode,
    release_std_vector_0101SceneNode,
    convertTo_std_vector_0101SceneNode,
    convertFrom_std_vector_0101SceneNode
};
