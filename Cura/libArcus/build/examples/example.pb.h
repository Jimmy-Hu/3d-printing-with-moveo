// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: example.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_example_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_example_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_example_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_example_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_example_2eproto;
namespace Example {
class Object;
class ObjectDefaultTypeInternal;
extern ObjectDefaultTypeInternal _Object_default_instance_;
class ObjectList;
class ObjectListDefaultTypeInternal;
extern ObjectListDefaultTypeInternal _ObjectList_default_instance_;
class Polygon;
class PolygonDefaultTypeInternal;
extern PolygonDefaultTypeInternal _Polygon_default_instance_;
class ProgressUpdate;
class ProgressUpdateDefaultTypeInternal;
extern ProgressUpdateDefaultTypeInternal _ProgressUpdate_default_instance_;
class SlicedObject;
class SlicedObjectDefaultTypeInternal;
extern SlicedObjectDefaultTypeInternal _SlicedObject_default_instance_;
class SlicedObjectList;
class SlicedObjectListDefaultTypeInternal;
extern SlicedObjectListDefaultTypeInternal _SlicedObjectList_default_instance_;
}  // namespace Example
PROTOBUF_NAMESPACE_OPEN
template<> ::Example::Object* Arena::CreateMaybeMessage<::Example::Object>(Arena*);
template<> ::Example::ObjectList* Arena::CreateMaybeMessage<::Example::ObjectList>(Arena*);
template<> ::Example::Polygon* Arena::CreateMaybeMessage<::Example::Polygon>(Arena*);
template<> ::Example::ProgressUpdate* Arena::CreateMaybeMessage<::Example::ProgressUpdate>(Arena*);
template<> ::Example::SlicedObject* Arena::CreateMaybeMessage<::Example::SlicedObject>(Arena*);
template<> ::Example::SlicedObjectList* Arena::CreateMaybeMessage<::Example::SlicedObjectList>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Example {

enum Polygon_Type : int {
  Polygon_Type_InnerType = 0,
  Polygon_Type_OuterType = 1,
  Polygon_Type_Polygon_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Polygon_Type_Polygon_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Polygon_Type_IsValid(int value);
constexpr Polygon_Type Polygon_Type_Type_MIN = Polygon_Type_InnerType;
constexpr Polygon_Type Polygon_Type_Type_MAX = Polygon_Type_OuterType;
constexpr int Polygon_Type_Type_ARRAYSIZE = Polygon_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Polygon_Type_descriptor();
template<typename T>
inline const std::string& Polygon_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Polygon_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Polygon_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Polygon_Type_descriptor(), enum_t_value);
}
inline bool Polygon_Type_Parse(
    const std::string& name, Polygon_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Polygon_Type>(
    Polygon_Type_descriptor(), name, value);
}
// ===================================================================

class ObjectList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Example.ObjectList) */ {
 public:
  ObjectList();
  virtual ~ObjectList();

  ObjectList(const ObjectList& from);
  ObjectList(ObjectList&& from) noexcept
    : ObjectList() {
    *this = ::std::move(from);
  }

  inline ObjectList& operator=(const ObjectList& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectList& operator=(ObjectList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ObjectList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObjectList* internal_default_instance() {
    return reinterpret_cast<const ObjectList*>(
               &_ObjectList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ObjectList& a, ObjectList& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObjectList* New() const final {
    return CreateMaybeMessage<ObjectList>(nullptr);
  }

  ObjectList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObjectList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObjectList& from);
  void MergeFrom(const ObjectList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Example.ObjectList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_example_2eproto);
    return ::descriptor_table_example_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectsFieldNumber = 1,
  };
  // repeated .Example.Object objects = 1;
  int objects_size() const;
  private:
  int _internal_objects_size() const;
  public:
  void clear_objects();
  ::Example::Object* mutable_objects(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Example::Object >*
      mutable_objects();
  private:
  const ::Example::Object& _internal_objects(int index) const;
  ::Example::Object* _internal_add_objects();
  public:
  const ::Example::Object& objects(int index) const;
  ::Example::Object* add_objects();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Example::Object >&
      objects() const;

  // @@protoc_insertion_point(class_scope:Example.ObjectList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Example::Object > objects_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_example_2eproto;
};
// -------------------------------------------------------------------

class Object :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Example.Object) */ {
 public:
  Object();
  virtual ~Object();

  Object(const Object& from);
  Object(Object&& from) noexcept
    : Object() {
    *this = ::std::move(from);
  }

  inline Object& operator=(const Object& from) {
    CopyFrom(from);
    return *this;
  }
  inline Object& operator=(Object&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Object& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Object* internal_default_instance() {
    return reinterpret_cast<const Object*>(
               &_Object_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Object& a, Object& b) {
    a.Swap(&b);
  }
  inline void Swap(Object* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Object* New() const final {
    return CreateMaybeMessage<Object>(nullptr);
  }

  Object* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Object>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Object& from);
  void MergeFrom(const Object& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Object* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Example.Object";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_example_2eproto);
    return ::descriptor_table_example_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVerticesFieldNumber = 2,
    kNormalsFieldNumber = 3,
    kIndicesFieldNumber = 4,
    kIdFieldNumber = 1,
  };
  // bytes vertices = 2;
  void clear_vertices();
  const std::string& vertices() const;
  void set_vertices(const std::string& value);
  void set_vertices(std::string&& value);
  void set_vertices(const char* value);
  void set_vertices(const void* value, size_t size);
  std::string* mutable_vertices();
  std::string* release_vertices();
  void set_allocated_vertices(std::string* vertices);
  private:
  const std::string& _internal_vertices() const;
  void _internal_set_vertices(const std::string& value);
  std::string* _internal_mutable_vertices();
  public:

  // bytes normals = 3;
  void clear_normals();
  const std::string& normals() const;
  void set_normals(const std::string& value);
  void set_normals(std::string&& value);
  void set_normals(const char* value);
  void set_normals(const void* value, size_t size);
  std::string* mutable_normals();
  std::string* release_normals();
  void set_allocated_normals(std::string* normals);
  private:
  const std::string& _internal_normals() const;
  void _internal_set_normals(const std::string& value);
  std::string* _internal_mutable_normals();
  public:

  // bytes indices = 4;
  void clear_indices();
  const std::string& indices() const;
  void set_indices(const std::string& value);
  void set_indices(std::string&& value);
  void set_indices(const char* value);
  void set_indices(const void* value, size_t size);
  std::string* mutable_indices();
  std::string* release_indices();
  void set_allocated_indices(std::string* indices);
  private:
  const std::string& _internal_indices() const;
  void _internal_set_indices(const std::string& value);
  std::string* _internal_mutable_indices();
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Example.Object)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vertices_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr normals_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr indices_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_example_2eproto;
};
// -------------------------------------------------------------------

class ProgressUpdate :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Example.ProgressUpdate) */ {
 public:
  ProgressUpdate();
  virtual ~ProgressUpdate();

  ProgressUpdate(const ProgressUpdate& from);
  ProgressUpdate(ProgressUpdate&& from) noexcept
    : ProgressUpdate() {
    *this = ::std::move(from);
  }

  inline ProgressUpdate& operator=(const ProgressUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProgressUpdate& operator=(ProgressUpdate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProgressUpdate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProgressUpdate* internal_default_instance() {
    return reinterpret_cast<const ProgressUpdate*>(
               &_ProgressUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ProgressUpdate& a, ProgressUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(ProgressUpdate* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProgressUpdate* New() const final {
    return CreateMaybeMessage<ProgressUpdate>(nullptr);
  }

  ProgressUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProgressUpdate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProgressUpdate& from);
  void MergeFrom(const ProgressUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProgressUpdate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Example.ProgressUpdate";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_example_2eproto);
    return ::descriptor_table_example_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectIdFieldNumber = 1,
    kAmountFieldNumber = 2,
  };
  // int32 objectId = 1;
  void clear_objectid();
  ::PROTOBUF_NAMESPACE_ID::int32 objectid() const;
  void set_objectid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_objectid() const;
  void _internal_set_objectid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 amount = 2;
  void clear_amount();
  ::PROTOBUF_NAMESPACE_ID::int32 amount() const;
  void set_amount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_amount() const;
  void _internal_set_amount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Example.ProgressUpdate)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 objectid_;
  ::PROTOBUF_NAMESPACE_ID::int32 amount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_example_2eproto;
};
// -------------------------------------------------------------------

class SlicedObjectList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Example.SlicedObjectList) */ {
 public:
  SlicedObjectList();
  virtual ~SlicedObjectList();

  SlicedObjectList(const SlicedObjectList& from);
  SlicedObjectList(SlicedObjectList&& from) noexcept
    : SlicedObjectList() {
    *this = ::std::move(from);
  }

  inline SlicedObjectList& operator=(const SlicedObjectList& from) {
    CopyFrom(from);
    return *this;
  }
  inline SlicedObjectList& operator=(SlicedObjectList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SlicedObjectList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SlicedObjectList* internal_default_instance() {
    return reinterpret_cast<const SlicedObjectList*>(
               &_SlicedObjectList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SlicedObjectList& a, SlicedObjectList& b) {
    a.Swap(&b);
  }
  inline void Swap(SlicedObjectList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SlicedObjectList* New() const final {
    return CreateMaybeMessage<SlicedObjectList>(nullptr);
  }

  SlicedObjectList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SlicedObjectList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SlicedObjectList& from);
  void MergeFrom(const SlicedObjectList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SlicedObjectList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Example.SlicedObjectList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_example_2eproto);
    return ::descriptor_table_example_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectsFieldNumber = 1,
  };
  // repeated .Example.SlicedObject objects = 1;
  int objects_size() const;
  private:
  int _internal_objects_size() const;
  public:
  void clear_objects();
  ::Example::SlicedObject* mutable_objects(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Example::SlicedObject >*
      mutable_objects();
  private:
  const ::Example::SlicedObject& _internal_objects(int index) const;
  ::Example::SlicedObject* _internal_add_objects();
  public:
  const ::Example::SlicedObject& objects(int index) const;
  ::Example::SlicedObject* add_objects();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Example::SlicedObject >&
      objects() const;

  // @@protoc_insertion_point(class_scope:Example.SlicedObjectList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Example::SlicedObject > objects_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_example_2eproto;
};
// -------------------------------------------------------------------

class SlicedObject :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Example.SlicedObject) */ {
 public:
  SlicedObject();
  virtual ~SlicedObject();

  SlicedObject(const SlicedObject& from);
  SlicedObject(SlicedObject&& from) noexcept
    : SlicedObject() {
    *this = ::std::move(from);
  }

  inline SlicedObject& operator=(const SlicedObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline SlicedObject& operator=(SlicedObject&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SlicedObject& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SlicedObject* internal_default_instance() {
    return reinterpret_cast<const SlicedObject*>(
               &_SlicedObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SlicedObject& a, SlicedObject& b) {
    a.Swap(&b);
  }
  inline void Swap(SlicedObject* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SlicedObject* New() const final {
    return CreateMaybeMessage<SlicedObject>(nullptr);
  }

  SlicedObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SlicedObject>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SlicedObject& from);
  void MergeFrom(const SlicedObject& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SlicedObject* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Example.SlicedObject";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_example_2eproto);
    return ::descriptor_table_example_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPolygonsFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // repeated .Example.Polygon polygons = 2;
  int polygons_size() const;
  private:
  int _internal_polygons_size() const;
  public:
  void clear_polygons();
  ::Example::Polygon* mutable_polygons(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Example::Polygon >*
      mutable_polygons();
  private:
  const ::Example::Polygon& _internal_polygons(int index) const;
  ::Example::Polygon* _internal_add_polygons();
  public:
  const ::Example::Polygon& polygons(int index) const;
  ::Example::Polygon* add_polygons();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Example::Polygon >&
      polygons() const;

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Example.SlicedObject)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Example::Polygon > polygons_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_example_2eproto;
};
// -------------------------------------------------------------------

class Polygon :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Example.Polygon) */ {
 public:
  Polygon();
  virtual ~Polygon();

  Polygon(const Polygon& from);
  Polygon(Polygon&& from) noexcept
    : Polygon() {
    *this = ::std::move(from);
  }

  inline Polygon& operator=(const Polygon& from) {
    CopyFrom(from);
    return *this;
  }
  inline Polygon& operator=(Polygon&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Polygon& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Polygon* internal_default_instance() {
    return reinterpret_cast<const Polygon*>(
               &_Polygon_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Polygon& a, Polygon& b) {
    a.Swap(&b);
  }
  inline void Swap(Polygon* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Polygon* New() const final {
    return CreateMaybeMessage<Polygon>(nullptr);
  }

  Polygon* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Polygon>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Polygon& from);
  void MergeFrom(const Polygon& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Polygon* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Example.Polygon";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_example_2eproto);
    return ::descriptor_table_example_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Polygon_Type Type;
  static constexpr Type InnerType =
    Polygon_Type_InnerType;
  static constexpr Type OuterType =
    Polygon_Type_OuterType;
  static inline bool Type_IsValid(int value) {
    return Polygon_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    Polygon_Type_Type_MIN;
  static constexpr Type Type_MAX =
    Polygon_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    Polygon_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return Polygon_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return Polygon_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(const std::string& name,
      Type* value) {
    return Polygon_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPointsFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // bytes points = 2;
  void clear_points();
  const std::string& points() const;
  void set_points(const std::string& value);
  void set_points(std::string&& value);
  void set_points(const char* value);
  void set_points(const void* value, size_t size);
  std::string* mutable_points();
  std::string* release_points();
  void set_allocated_points(std::string* points);
  private:
  const std::string& _internal_points() const;
  void _internal_set_points(const std::string& value);
  std::string* _internal_mutable_points();
  public:

  // .Example.Polygon.Type type = 1;
  void clear_type();
  ::Example::Polygon_Type type() const;
  void set_type(::Example::Polygon_Type value);
  private:
  ::Example::Polygon_Type _internal_type() const;
  void _internal_set_type(::Example::Polygon_Type value);
  public:

  // @@protoc_insertion_point(class_scope:Example.Polygon)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr points_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_example_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ObjectList

// repeated .Example.Object objects = 1;
inline int ObjectList::_internal_objects_size() const {
  return objects_.size();
}
inline int ObjectList::objects_size() const {
  return _internal_objects_size();
}
inline void ObjectList::clear_objects() {
  objects_.Clear();
}
inline ::Example::Object* ObjectList::mutable_objects(int index) {
  // @@protoc_insertion_point(field_mutable:Example.ObjectList.objects)
  return objects_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Example::Object >*
ObjectList::mutable_objects() {
  // @@protoc_insertion_point(field_mutable_list:Example.ObjectList.objects)
  return &objects_;
}
inline const ::Example::Object& ObjectList::_internal_objects(int index) const {
  return objects_.Get(index);
}
inline const ::Example::Object& ObjectList::objects(int index) const {
  // @@protoc_insertion_point(field_get:Example.ObjectList.objects)
  return _internal_objects(index);
}
inline ::Example::Object* ObjectList::_internal_add_objects() {
  return objects_.Add();
}
inline ::Example::Object* ObjectList::add_objects() {
  // @@protoc_insertion_point(field_add:Example.ObjectList.objects)
  return _internal_add_objects();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Example::Object >&
ObjectList::objects() const {
  // @@protoc_insertion_point(field_list:Example.ObjectList.objects)
  return objects_;
}

// -------------------------------------------------------------------

// Object

// int32 id = 1;
inline void Object::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Object::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Object::id() const {
  // @@protoc_insertion_point(field_get:Example.Object.id)
  return _internal_id();
}
inline void Object::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void Object::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Example.Object.id)
}

// bytes vertices = 2;
inline void Object::clear_vertices() {
  vertices_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Object::vertices() const {
  // @@protoc_insertion_point(field_get:Example.Object.vertices)
  return _internal_vertices();
}
inline void Object::set_vertices(const std::string& value) {
  _internal_set_vertices(value);
  // @@protoc_insertion_point(field_set:Example.Object.vertices)
}
inline std::string* Object::mutable_vertices() {
  // @@protoc_insertion_point(field_mutable:Example.Object.vertices)
  return _internal_mutable_vertices();
}
inline const std::string& Object::_internal_vertices() const {
  return vertices_.GetNoArena();
}
inline void Object::_internal_set_vertices(const std::string& value) {
  
  vertices_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Object::set_vertices(std::string&& value) {
  
  vertices_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Example.Object.vertices)
}
inline void Object::set_vertices(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  vertices_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Example.Object.vertices)
}
inline void Object::set_vertices(const void* value, size_t size) {
  
  vertices_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Example.Object.vertices)
}
inline std::string* Object::_internal_mutable_vertices() {
  
  return vertices_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Object::release_vertices() {
  // @@protoc_insertion_point(field_release:Example.Object.vertices)
  
  return vertices_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Object::set_allocated_vertices(std::string* vertices) {
  if (vertices != nullptr) {
    
  } else {
    
  }
  vertices_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vertices);
  // @@protoc_insertion_point(field_set_allocated:Example.Object.vertices)
}

// bytes normals = 3;
inline void Object::clear_normals() {
  normals_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Object::normals() const {
  // @@protoc_insertion_point(field_get:Example.Object.normals)
  return _internal_normals();
}
inline void Object::set_normals(const std::string& value) {
  _internal_set_normals(value);
  // @@protoc_insertion_point(field_set:Example.Object.normals)
}
inline std::string* Object::mutable_normals() {
  // @@protoc_insertion_point(field_mutable:Example.Object.normals)
  return _internal_mutable_normals();
}
inline const std::string& Object::_internal_normals() const {
  return normals_.GetNoArena();
}
inline void Object::_internal_set_normals(const std::string& value) {
  
  normals_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Object::set_normals(std::string&& value) {
  
  normals_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Example.Object.normals)
}
inline void Object::set_normals(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  normals_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Example.Object.normals)
}
inline void Object::set_normals(const void* value, size_t size) {
  
  normals_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Example.Object.normals)
}
inline std::string* Object::_internal_mutable_normals() {
  
  return normals_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Object::release_normals() {
  // @@protoc_insertion_point(field_release:Example.Object.normals)
  
  return normals_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Object::set_allocated_normals(std::string* normals) {
  if (normals != nullptr) {
    
  } else {
    
  }
  normals_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), normals);
  // @@protoc_insertion_point(field_set_allocated:Example.Object.normals)
}

// bytes indices = 4;
inline void Object::clear_indices() {
  indices_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Object::indices() const {
  // @@protoc_insertion_point(field_get:Example.Object.indices)
  return _internal_indices();
}
inline void Object::set_indices(const std::string& value) {
  _internal_set_indices(value);
  // @@protoc_insertion_point(field_set:Example.Object.indices)
}
inline std::string* Object::mutable_indices() {
  // @@protoc_insertion_point(field_mutable:Example.Object.indices)
  return _internal_mutable_indices();
}
inline const std::string& Object::_internal_indices() const {
  return indices_.GetNoArena();
}
inline void Object::_internal_set_indices(const std::string& value) {
  
  indices_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Object::set_indices(std::string&& value) {
  
  indices_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Example.Object.indices)
}
inline void Object::set_indices(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  indices_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Example.Object.indices)
}
inline void Object::set_indices(const void* value, size_t size) {
  
  indices_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Example.Object.indices)
}
inline std::string* Object::_internal_mutable_indices() {
  
  return indices_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Object::release_indices() {
  // @@protoc_insertion_point(field_release:Example.Object.indices)
  
  return indices_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Object::set_allocated_indices(std::string* indices) {
  if (indices != nullptr) {
    
  } else {
    
  }
  indices_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), indices);
  // @@protoc_insertion_point(field_set_allocated:Example.Object.indices)
}

// -------------------------------------------------------------------

// ProgressUpdate

// int32 objectId = 1;
inline void ProgressUpdate::clear_objectid() {
  objectid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProgressUpdate::_internal_objectid() const {
  return objectid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProgressUpdate::objectid() const {
  // @@protoc_insertion_point(field_get:Example.ProgressUpdate.objectId)
  return _internal_objectid();
}
inline void ProgressUpdate::_internal_set_objectid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  objectid_ = value;
}
inline void ProgressUpdate::set_objectid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_objectid(value);
  // @@protoc_insertion_point(field_set:Example.ProgressUpdate.objectId)
}

// int32 amount = 2;
inline void ProgressUpdate::clear_amount() {
  amount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProgressUpdate::_internal_amount() const {
  return amount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProgressUpdate::amount() const {
  // @@protoc_insertion_point(field_get:Example.ProgressUpdate.amount)
  return _internal_amount();
}
inline void ProgressUpdate::_internal_set_amount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  amount_ = value;
}
inline void ProgressUpdate::set_amount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:Example.ProgressUpdate.amount)
}

// -------------------------------------------------------------------

// SlicedObjectList

// repeated .Example.SlicedObject objects = 1;
inline int SlicedObjectList::_internal_objects_size() const {
  return objects_.size();
}
inline int SlicedObjectList::objects_size() const {
  return _internal_objects_size();
}
inline void SlicedObjectList::clear_objects() {
  objects_.Clear();
}
inline ::Example::SlicedObject* SlicedObjectList::mutable_objects(int index) {
  // @@protoc_insertion_point(field_mutable:Example.SlicedObjectList.objects)
  return objects_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Example::SlicedObject >*
SlicedObjectList::mutable_objects() {
  // @@protoc_insertion_point(field_mutable_list:Example.SlicedObjectList.objects)
  return &objects_;
}
inline const ::Example::SlicedObject& SlicedObjectList::_internal_objects(int index) const {
  return objects_.Get(index);
}
inline const ::Example::SlicedObject& SlicedObjectList::objects(int index) const {
  // @@protoc_insertion_point(field_get:Example.SlicedObjectList.objects)
  return _internal_objects(index);
}
inline ::Example::SlicedObject* SlicedObjectList::_internal_add_objects() {
  return objects_.Add();
}
inline ::Example::SlicedObject* SlicedObjectList::add_objects() {
  // @@protoc_insertion_point(field_add:Example.SlicedObjectList.objects)
  return _internal_add_objects();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Example::SlicedObject >&
SlicedObjectList::objects() const {
  // @@protoc_insertion_point(field_list:Example.SlicedObjectList.objects)
  return objects_;
}

// -------------------------------------------------------------------

// SlicedObject

// int32 id = 1;
inline void SlicedObject::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SlicedObject::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SlicedObject::id() const {
  // @@protoc_insertion_point(field_get:Example.SlicedObject.id)
  return _internal_id();
}
inline void SlicedObject::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void SlicedObject::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Example.SlicedObject.id)
}

// repeated .Example.Polygon polygons = 2;
inline int SlicedObject::_internal_polygons_size() const {
  return polygons_.size();
}
inline int SlicedObject::polygons_size() const {
  return _internal_polygons_size();
}
inline void SlicedObject::clear_polygons() {
  polygons_.Clear();
}
inline ::Example::Polygon* SlicedObject::mutable_polygons(int index) {
  // @@protoc_insertion_point(field_mutable:Example.SlicedObject.polygons)
  return polygons_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Example::Polygon >*
SlicedObject::mutable_polygons() {
  // @@protoc_insertion_point(field_mutable_list:Example.SlicedObject.polygons)
  return &polygons_;
}
inline const ::Example::Polygon& SlicedObject::_internal_polygons(int index) const {
  return polygons_.Get(index);
}
inline const ::Example::Polygon& SlicedObject::polygons(int index) const {
  // @@protoc_insertion_point(field_get:Example.SlicedObject.polygons)
  return _internal_polygons(index);
}
inline ::Example::Polygon* SlicedObject::_internal_add_polygons() {
  return polygons_.Add();
}
inline ::Example::Polygon* SlicedObject::add_polygons() {
  // @@protoc_insertion_point(field_add:Example.SlicedObject.polygons)
  return _internal_add_polygons();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Example::Polygon >&
SlicedObject::polygons() const {
  // @@protoc_insertion_point(field_list:Example.SlicedObject.polygons)
  return polygons_;
}

// -------------------------------------------------------------------

// Polygon

// .Example.Polygon.Type type = 1;
inline void Polygon::clear_type() {
  type_ = 0;
}
inline ::Example::Polygon_Type Polygon::_internal_type() const {
  return static_cast< ::Example::Polygon_Type >(type_);
}
inline ::Example::Polygon_Type Polygon::type() const {
  // @@protoc_insertion_point(field_get:Example.Polygon.type)
  return _internal_type();
}
inline void Polygon::_internal_set_type(::Example::Polygon_Type value) {
  
  type_ = value;
}
inline void Polygon::set_type(::Example::Polygon_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Example.Polygon.type)
}

// bytes points = 2;
inline void Polygon::clear_points() {
  points_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Polygon::points() const {
  // @@protoc_insertion_point(field_get:Example.Polygon.points)
  return _internal_points();
}
inline void Polygon::set_points(const std::string& value) {
  _internal_set_points(value);
  // @@protoc_insertion_point(field_set:Example.Polygon.points)
}
inline std::string* Polygon::mutable_points() {
  // @@protoc_insertion_point(field_mutable:Example.Polygon.points)
  return _internal_mutable_points();
}
inline const std::string& Polygon::_internal_points() const {
  return points_.GetNoArena();
}
inline void Polygon::_internal_set_points(const std::string& value) {
  
  points_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Polygon::set_points(std::string&& value) {
  
  points_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Example.Polygon.points)
}
inline void Polygon::set_points(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  points_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Example.Polygon.points)
}
inline void Polygon::set_points(const void* value, size_t size) {
  
  points_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Example.Polygon.points)
}
inline std::string* Polygon::_internal_mutable_points() {
  
  return points_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Polygon::release_points() {
  // @@protoc_insertion_point(field_release:Example.Polygon.points)
  
  return points_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Polygon::set_allocated_points(std::string* points) {
  if (points != nullptr) {
    
  } else {
    
  }
  points_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), points);
  // @@protoc_insertion_point(field_set_allocated:Example.Polygon.points)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Example

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Example::Polygon_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Example::Polygon_Type>() {
  return ::Example::Polygon_Type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_example_2eproto
